[{"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\index.js":"1","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\LandingPage.js":"2","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\Index.js":"3","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\DeleteUser.js":"4","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\RegisterPage.js":"5","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\AdminPage.js":"6","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\ProfilePage.js":"7","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\AddDoctor.js":"8","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\DoctorProfile.js":"9","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\DoctorEdit.js":"10","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\DoctorInfo.js":"11","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\SearchDoctor.js":"12","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\ViewRecords.js":"13","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\AddPatientrecords.js":"14","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\AddPatient.js":"15","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\PatientInfo.js":"16","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\SearchPatient.js":"17","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\variables\\charts.js":"18","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\components\\Navbars\\ExamplesNavbar.js":"19","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\components\\Footer\\Footer.js":"20","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\components\\Navbars\\IndexNavbar.js":"21","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\utils\\histroy.js":"22","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\utils\\ipfs.js":"23","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\Details.js":"24","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\PatientProfile.js":"25"},{"size":4207,"mtime":1640179933504,"results":"26","hashOfConfig":"27"},{"size":2816,"mtime":1639465029180,"results":"28","hashOfConfig":"27"},{"size":4145,"mtime":1640183731566,"results":"29","hashOfConfig":"27"},{"size":9642,"mtime":1640002201018,"results":"30","hashOfConfig":"27"},{"size":7297,"mtime":1638873387515,"results":"31","hashOfConfig":"27"},{"size":5384,"mtime":1639954783738,"results":"32","hashOfConfig":"27"},{"size":9211,"mtime":1640002200906,"results":"33","hashOfConfig":"27"},{"size":16971,"mtime":1640002200982,"results":"34","hashOfConfig":"27"},{"size":8560,"mtime":1640183392792,"results":"35","hashOfConfig":"27"},{"size":18184,"mtime":1640002201121,"results":"36","hashOfConfig":"27"},{"size":19965,"mtime":1640002201202,"results":"37","hashOfConfig":"27"},{"size":6934,"mtime":1640002200774,"results":"38","hashOfConfig":"27"},{"size":10963,"mtime":1640181126955,"results":"39","hashOfConfig":"27"},{"size":29614,"mtime":1640160072731,"results":"40","hashOfConfig":"27"},{"size":14343,"mtime":1640002201057,"results":"41","hashOfConfig":"27"},{"size":16561,"mtime":1639451592878,"results":"42","hashOfConfig":"27"},{"size":6880,"mtime":1639450636429,"results":"43","hashOfConfig":"27"},{"size":2323,"mtime":1638773778209,"results":"44","hashOfConfig":"27"},{"size":5206,"mtime":1638773660986,"results":"45","hashOfConfig":"27"},{"size":1125,"mtime":1640183476142,"results":"46","hashOfConfig":"27"},{"size":9274,"mtime":1640179955571,"results":"47","hashOfConfig":"27"},{"size":86,"mtime":1638948697250,"results":"48","hashOfConfig":"27"},{"size":147,"mtime":1638875895970,"results":"49","hashOfConfig":"27"},{"size":10447,"mtime":1640179183383,"results":"50","hashOfConfig":"27"},{"size":11238,"mtime":1640183251234,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"1ra7yx8",{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"55"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"55"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"55"},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"55"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"55"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"55"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"55"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123"},"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\index.js",["124"],"// import React from 'react';\n// import ReactDOM from 'react-dom';\n// import 'bootstrap/dist/css/bootstrap.css'\n\n// import * as serviceWorker from './serviceWorker';\n//\n// ReactDOM.render(<App />, document.getElementById('root'));\n//\n// serviceWorker.unregister();\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport \"./assets/css/nucleo-icons.css\";\nimport \"./assets/scss/blk-design-system-react.scss?v=1.2.0\";\nimport \"./assets/demo/demo.css\";\n\n// import Index from \"views/Index.js\";\nimport App from './views/Index';\nimport LandingPage from \"./views/examples/LandingPage\";\nimport RegisterPage from \"./views/examples/RegisterPage\";\nimport ProfilePage from \"./views/examples/ProfilePage\";\nimport AdminPage from \"./views/examples/AdminPage\";\nimport AddDoctor from \"./views/examples/Doctor/AddDoctor\";\nimport SearchDoctor from \"./views/examples/Doctor/SearchDoctor\";\nimport DoctorInfo from \"./views/examples/Doctor/DoctorInfo\";\nimport AddPatient from './views/examples/patient/AddPatient';\nimport SearchPatient from './views/examples/patient/SearchPatient';\nimport PatientInfo from './views/examples/patient/PatientInfo';\nimport DeleteUser from './views/examples/DeleteUser';\nimport DoctorProfile from \"./views/examples/Doctor/DoctorProfile\";\nimport DoctorEdit from \"./views/examples/Doctor/DoctorEdit\"\nimport AddPatientrecord from \"./views/examples/Doctor/AddPatientrecords\";\nimport ViewRecords from \"./views/examples/Doctor/ViewRecords\";\nimport Details from \"./views/examples/Doctor/Details\";\nimport PatientProfile from \"./views/examples/patient/PatientProfile\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/index\" render={(props) => <App {...props} />} />\n            {/*<Route*/}\n            {/*    path=\"/landing-page\"*/}\n            {/*    render={(props) => <LandingPage {...props} />}*/}\n            {/*/>*/}\n            <Route\n                path=\"/register-page\"\n                render={(props) => <RegisterPage {...props} />}\n            />\n            <Route\n                path=\"/profile-page\"\n                render={(props) => <ProfilePage {...props} />}\n            />\n            <Route\n                path=\"/admin\"\n                render={(props) => <AdminPage {...props} />}\n            />\n            <Route\n                path=\"/add_doctor\"\n                render={(props) => <AddDoctor {...props} />}\n            />\n            <Route\n                path=\"/search\"\n                render={(props) => <SearchDoctor {...props} />}\n            />\n            <Route\n                path=\"/doctor\"\n                render={(props) => <DoctorInfo {...props} />}\n            />\n            <Route\n                path=\"/add_patient\"\n                render={(props) => <AddPatient {...props} />}\n            />\n            <Route\n                path=\"/search_patient\"\n                render={(props) => <SearchPatient {...props} />}\n            />\n            <Route\n                path=\"/patient\"\n                render={(props) => <PatientInfo {...props} />}\n            />\n            <Route\n                path=\"/remove\"\n                render={(props) => <DeleteUser {...props} />}\n            />\n            <Route\n                path=\"/Doctor_Profile\"\n                render={(props) => <DoctorProfile {...props} />}\n            />\n            <Route\n                path=\"/patient_profile\"\n                render={(props) => <PatientProfile {...props} />}\n            />\n            <Route\n                path=\"/Doctor_edit\"\n                render={(props) => <DoctorEdit {...props} />}\n            />\n            <Route\n                path=\"/add_record\"\n                render={(props) => <AddPatientrecord {...props} />}\n            />\n            <Route\n                path=\"/view_record\"\n                render={(props) => <ViewRecords {...props} />}\n            />\n            <Route\n                exact\n                path=\"/details/:hash\"\n                render={(props) => <Details {...props} />}\n            />\n            <Redirect from=\"/\" to=\"/index\" />\n        </Switch>\n    </BrowserRouter>,\n    document.getElementById(\"root\")\n);\n",["125","126"],"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\LandingPage.js",["127","128","129","130","131","132","133","134","135","136","137","138"],"\nimport React from \"react\";\n// react plugin used to create charts\nimport { Line } from \"react-chartjs-2\";\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  ListGroupItem,\n  ListGroup,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\n// core components\nimport ExamplesNavbar from \"../../components/Navbars/ExamplesNavbar.js\";\nimport Footer from \"../../components/Footer/Footer.js\";\n\nimport bigChartData from \"../../variables/charts.js\";\nimport IndexNavbar from \"../../components/Navbars/IndexNavbar\";\n\nexport default function LandingPage() {\n  React.useEffect(() => {\n    document.body.classList.toggle(\"landing-page\");\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      document.body.classList.toggle(\"landing-page\");\n    };\n  },[]);\n  return (\n    <>\n      <IndexNavbar />\n      <div className=\"wrapper\">\n        <div className=\"page-header\">\n          <img\n            alt=\"...\"\n            className=\"path\"\n            src={require(\"../../assets/img/blob.png\").default}\n          />\n          <img\n            alt=\"...\"\n            className=\"path2\"\n            src={require(\"../../assets/img/path2.png\").default}\n          />\n          <img\n            alt=\"...\"\n            className=\"shapes triangle\"\n            src={require(\"../../assets/img/triunghiuri.png\").default}\n          />\n          <img\n            alt=\"...\"\n            className=\"shapes wave\"\n            src={require(\"../../assets/img/waves.png\").default}\n          />\n          <img\n            alt=\"...\"\n            className=\"shapes squares\"\n            src={require(\"../../assets/img/patrat.png\").default}\n          />\n          <img\n            alt=\"...\"\n            className=\"shapes circle\"\n            src={require(\"../../assets/img/cercuri.png\").default}\n          />\n          <div className=\"content-center\">\n            <Row className=\"row-grid justify-content-between align-items-center text-left\">\n              <Col lg=\"6\" md=\"6\">\n                <h1 className=\"text-white\">\n                  We keep your coin <br />\n                  <span className=\"text-white\">secured</span>\n                </h1>\n                <p className=\"text-white mb-3\">\n                  A wonderful serenity has taken possession of my entire soul,\n                  like these sweet mornings of spring which I enjoy with my\n                  whole heart. I am alone, and feel...\n                </p>\n              </Col>\n              <Col lg=\"4\" md=\"5\">\n                <img\n                  alt=\"...\"\n                  className=\"img-fluid\"\n                  src={require(\"../../assets/img/etherum.png\").default}\n                />\n              </Col>\n            </Row>\n          </div>\n        </div>\n\n        <Footer />\n      </div>\n    </>\n  );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\Index.js",["139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155"],"\nimport React, {useState} from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardTitle,\n  ListGroupItem,\n  ListGroup,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\nimport Footer from \"../components/Footer/Footer.js\";\nimport bigChartData from \"../variables/charts.js\";\nimport IndexNavbar from \"../components/Navbars/IndexNavbar\";\nimport Web3 from \"web3\";\nimport Meme from \"../abis/Meme.json\";\nimport ipfs from \"../utils/ipfs\";\n\nexport default function App() {\n  const [loadweb3s, setLoadweb3s] = useState('');\n  const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\n  const [account, setAccount] = useState('');\n  const [contract, setContract] = useState(null);\n\n  React.useEffect(() => {\n    document.body.classList.toggle(\"landing-page\");\n\n     return function cleanup() {\n      document.body.classList.toggle(\"landing-page\");\n    };\n\n    if (!loadweb3s) {\n      loadWeb3();\n    }\n    if (!loadBlockchainDates) {\n      loadBlockchainDate();\n    }\n  },[]);\n\n  const loadWeb3 = async () => {\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } if(window.web3){\n      window.web3 = new Web3(window.web3.currentProvider)\n    }else{\n      window.alert('Please use Metamask');\n    }\n  };\n\n  const loadBlockchainDate = async () => {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    setAccount(accounts[0])\n    const networkId = await web3.eth.net.getId()\n    const networkData = Meme.networks[networkId]\n    if(networkData){\n      const abi = Meme.abi\n      const address = networkData.address\n      const contract = web3.eth.Contract(abi,address)\n      setContract(contract)\n    }else{\n      window.alert(\"Smart contract not deployed to the detected network\")\n    }\n    window.ethereum.on('accountsChanged', function (accounts) {\n      window.location.reload()\n    })\n    setLoadBlockchainDates('true');\n  };\n\n\n\n\n\n  return (\n      <>\n        <IndexNavbar isadmin={\"false\"} isdoctor={\"false\"} ishome={\"true\"}/>\n        <div className=\"wrapper\">\n          <div className=\"page-header\">\n            <img\n                alt=\"...\"\n                className=\"path\"\n                src={require(\"../assets/img/blob.png\").default}\n            />\n            <img\n                alt=\"...\"\n                className=\"path2\"\n                src={require(\"../assets/img/path2.png\").default}\n            />\n            <img\n                alt=\"...\"\n                className=\"shapes triangle\"\n                src={require(\"../assets/img/triunghiuri.png\").default}\n            />\n            <img\n                alt=\"...\"\n                className=\"shapes wave\"\n                src={require(\"../assets/img/waves.png\").default}\n            />\n            <img\n                alt=\"...\"\n                className=\"shapes squares\"\n                src={require(\"../assets/img/patrat.png\").default}\n            />\n            <img\n                alt=\"...\"\n                className=\"shapes circle\"\n                src={require(\"../assets/img/cercuri.png\").default}\n            />\n            <div className=\"content-center\">\n              <Row className=\"row-grid justify-content-between align-items-center text-left\">\n                <Col lg=\"6\" md=\"6\">\n                  <h1 className=\"text-white\">\n                    Welcome to helio <br />\n                    <span className=\"text-white\">health chain</span>\n                  </h1>\n                  <p className=\"text-white mb-3\">\n                    We are here for your Care\n                  </p>\n                </Col>\n                <Col lg=\"4\" md=\"5\">\n                  <img\n                      alt=\"...\"\n                      className=\"img-fluid\"\n                      src={require(\"../assets/img/etherum.png\").default}\n                  />\n                </Col>\n              </Row>\n            </div>\n          </div>\n          <section className=\"section section-lg\">\n            <section className=\"section\">\n\n            </section>\n          </section>\n          <Footer />\n        </div>\n      </>\n  );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\DeleteUser.js",["156","157","158","159","160","161","162","163","164","165"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Label,\r\n    Button,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport Footer from \"../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../utils/ipfs\";\r\n\r\nlet ps = null;\r\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\r\n\r\nexport default function DeleteUser() {\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [Drinfo, setDrinfo] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n        if(!Drinfo){\r\n            // getDrInfo();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            const adminId = await contract.methods.getAdmin().call()\r\n\r\n            if(adminId == accounts[0]){\r\n                setIsAdmin('false')\r\n            }else{\r\n                // Swal.fire({\r\n                //     icon: 'error',\r\n                //     title: 'Oops...',\r\n                //     text: 'Only Admin have access!',\r\n                // }).then((value)=>{\r\n                //     // history.push(\"/home\")\r\n                //     window.location.href=\"/index\";\r\n                // });\r\n            }\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                role: '',\r\n                accid: '',\r\n\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n\r\n                role: Yup.string()\r\n                    .required('Required'),\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                if(values.role===\"Doctor\")\r\n                {\r\n                    try {\r\n                        contract.methods.delDr(values.accid).send({from: account}).on(\"confirmation\", (r) => {\r\n                            Swal.fire({\r\n                                icon: 'success',\r\n                                title: 'Success',\r\n                                text: 'Doctor removed successfully!',\r\n                            })\r\n                            window.location.reload();\r\n                        }).on(\"error\",(er)=>{\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Not Found',\r\n                                text: 'Doctor id doesnot Exist',\r\n                            })\r\n\r\n                            window.location.reload();\r\n                        });\r\n                    }catch (e) {\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'error',\r\n                            text: 'Someting Went wrong',\r\n                        })\r\n                    }\r\n\r\n                }\r\n                else if(values.role === \"Patient\"){\r\n                    contract.methods.delPat(values.acc_id).send({from: account}).on(\"confirmation\", (r) => {\r\n                        Swal.fire({\r\n                            icon: 'success',\r\n                            title: 'Success',\r\n                            text: 'patient removed successfully!',\r\n                        })\r\n                        window.location.reload();\r\n                    }).on(\"error\",(er)=>{\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Not Found',\r\n                            text: 'patient id doesnot Exist!',\r\n                        })\r\n                        window.location.reload();\r\n                    });\r\n                }\r\n            },\r\n\r\n        });\r\n        return (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Account Id</label>\r\n                            <Input\r\n                                id=\"accid\"\r\n                                name=\"accid\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.accid}\r\n                            />\r\n                            {formik.touched.accid && formik.errors.accid ? (\r\n                                <div>{formik.errors.accid}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <Label for=\"exampleSelect1\">Example select</Label>\r\n                            <select\r\n                                name=\"role\"\r\n                                classname=\"form-control\"\r\n                                id=\"role\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                            >\r\n                            <option value=\"\">Select Role</option>\r\n                            <option calue=\"Doctor\">Doctor</option>\r\n                            <option value=\"Patient\">Patient</option>\r\n                            </select>\r\n                            {formik.touched.role && formik.errors.role ? (\r\n                                <div>{formik.errors.role}</div>\r\n                            ) : null}\r\n                          </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Button\r\n                    className=\"btn-round float-right\"\r\n                    color=\"primary\"\r\n                    data-placement=\"right\"\r\n                    id=\"tooltip341148792\"\r\n                    type=\"submit\"\r\n                >\r\n                    Delete\r\n                </Button>\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"} isdoctor={\"false\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">Delete</h1>\r\n                                        <h5 className=\"text-on-back\">User</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\RegisterPage.js",["166"],"\nimport React from \"react\";\nimport classnames from \"classnames\";\n// reactstrap components\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  CardFooter,\n  CardImg,\n  CardTitle,\n  Label,\n  FormGroup,\n  Form,\n  Input,\n  InputGroupAddon,\n  InputGroupText,\n  InputGroup,\n  Container,\n  Row,\n  Col,\n} from \"reactstrap\";\n\n// core components\nimport ExamplesNavbar from \"../../components/Navbars/ExamplesNavbar.js\";\nimport Footer from \"../../components/Footer/Footer.js\";\nimport IndexNavbar from \"../../components/Navbars/IndexNavbar\";\n\nexport default function RegisterPage() {\n  const [squares1to6, setSquares1to6] = React.useState(\"\");\n  const [squares7and8, setSquares7and8] = React.useState(\"\");\n  const [fullNameFocus, setFullNameFocus] = React.useState(false);\n  const [emailFocus, setEmailFocus] = React.useState(false);\n  const [passwordFocus, setPasswordFocus] = React.useState(false);\n  React.useEffect(() => {\n    document.body.classList.toggle(\"register-page\");\n    document.documentElement.addEventListener(\"mousemove\", followCursor);\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      document.body.classList.toggle(\"register-page\");\n      document.documentElement.removeEventListener(\"mousemove\", followCursor);\n    };\n  },[]);\n  const followCursor = (event) => {\n    let posX = event.clientX - window.innerWidth / 2;\n    let posY = event.clientY - window.innerWidth / 6;\n    setSquares1to6(\n      \"perspective(500px) rotateY(\" +\n        posX * 0.05 +\n        \"deg) rotateX(\" +\n        posY * -0.05 +\n        \"deg)\"\n    );\n    setSquares7and8(\n      \"perspective(500px) rotateY(\" +\n        posX * 0.02 +\n        \"deg) rotateX(\" +\n        posY * -0.02 +\n        \"deg)\"\n    );\n  };\n  return (\n    <>\n      <IndexNavbar />\n      <div className=\"wrapper\">\n        <div className=\"page-header\">\n          <div className=\"page-header-image\" />\n          <div className=\"content\">\n            <Container>\n              <Row>\n                <Col className=\"offset-lg-0 offset-md-3\" lg=\"5\" md=\"6\">\n                  <div\n                    className=\"square square-7\"\n                    id=\"square7\"\n                    style={{ transform: squares7and8 }}\n                  />\n                  <div\n                    className=\"square square-8\"\n                    id=\"square8\"\n                    style={{ transform: squares7and8 }}\n                  />\n                  <Card className=\"card-register\">\n                    <CardHeader>\n                      <CardImg\n                        alt=\"...\"\n                        src={require(\"../../assets/img/square-purple-1.png\").default}\n                      />\n                      <CardTitle tag=\"h4\">Register</CardTitle>\n                    </CardHeader>\n                    <CardBody>\n                      <Form className=\"form\">\n                        <InputGroup\n                          className={classnames({\n                            \"input-group-focus\": fullNameFocus,\n                          })}\n                        >\n                          <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>\n                              <i className=\"tim-icons icon-single-02\" />\n                            </InputGroupText>\n                          </InputGroupAddon>\n                          <Input\n                            placeholder=\"Full Name\"\n                            type=\"text\"\n                            onFocus={(e) => setFullNameFocus(true)}\n                            onBlur={(e) => setFullNameFocus(false)}\n                          />\n                        </InputGroup>\n                        <InputGroup\n                          className={classnames({\n                            \"input-group-focus\": emailFocus,\n                          })}\n                        >\n                          <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>\n                              <i className=\"tim-icons icon-email-85\" />\n                            </InputGroupText>\n                          </InputGroupAddon>\n                          <Input\n                            placeholder=\"Email\"\n                            type=\"text\"\n                            onFocus={(e) => setEmailFocus(true)}\n                            onBlur={(e) => setEmailFocus(false)}\n                          />\n                        </InputGroup>\n                        <InputGroup\n                          className={classnames({\n                            \"input-group-focus\": passwordFocus,\n                          })}\n                        >\n                          <InputGroupAddon addonType=\"prepend\">\n                            <InputGroupText>\n                              <i className=\"tim-icons icon-lock-circle\" />\n                            </InputGroupText>\n                          </InputGroupAddon>\n                          <Input\n                            placeholder=\"Password\"\n                            type=\"text\"\n                            onFocus={(e) => setPasswordFocus(true)}\n                            onBlur={(e) => setPasswordFocus(false)}\n                          />\n                        </InputGroup>\n                        <FormGroup check className=\"text-left\">\n                          <Label check>\n                            <Input type=\"checkbox\" />\n                            <span className=\"form-check-sign\" />I agree to the{\" \"}\n                            <a\n                              href=\"#pablo\"\n                              onClick={(e) => e.preventDefault()}\n                            >\n                              terms and conditions\n                            </a>\n                            .\n                          </Label>\n                        </FormGroup>\n                      </Form>\n                    </CardBody>\n                    <CardFooter>\n                      <Button className=\"btn-round\" color=\"primary\" size=\"lg\">\n                        Get Started\n                      </Button>\n                    </CardFooter>\n                  </Card>\n                </Col>\n              </Row>\n              <div className=\"register-bg\" />\n              <div\n                className=\"square square-1\"\n                id=\"square1\"\n                style={{ transform: squares1to6 }}\n              />\n              <div\n                className=\"square square-2\"\n                id=\"square2\"\n                style={{ transform: squares1to6 }}\n              />\n              <div\n                className=\"square square-3\"\n                id=\"square3\"\n                style={{ transform: squares1to6 }}\n              />\n              <div\n                className=\"square square-4\"\n                id=\"square4\"\n                style={{ transform: squares1to6 }}\n              />\n              <div\n                className=\"square square-5\"\n                id=\"square5\"\n                style={{ transform: squares1to6 }}\n              />\n              <div\n                className=\"square square-6\"\n                id=\"square6\"\n                style={{ transform: squares1to6 }}\n              />\n            </Container>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    </>\n  );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\AdminPage.js",["167","168","169","170","171","172","173","174","175","176","177","178","179","180"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    UncontrolledTooltip,\r\n    CardTitle,\r\n} from \"reactstrap\";\r\n\r\nimport Footer from \"../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../abis/Meme.json\";\r\nimport ipfs from \"../../utils/ipfs\";\r\nimport Swal from \"sweetalert2\";\r\nimport histroy from \"../../utils/histroy\";\r\n\r\n\r\nlet ps = null;\r\n\r\nexport default function AdminPage() {\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n           loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            const adminId = await contract.methods.getAdmin().call()\r\n\r\n            if(adminId == accounts[0]){\r\n                setIsAdmin('false')\r\n            }else{\r\n                // Swal.fire({\r\n                //     icon: 'error',\r\n                //     title: 'Oops...',\r\n                //     text: 'Only Admin have access!',\r\n                // }).then((value)=>{\r\n                //     // history.push(\"/home\")\r\n                //     window.location.href=\"/index\";\r\n                // });\r\n            }\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"}/>\r\n            <div className=\"wrapper\">\r\n                <div className=\"page-header\">\r\n                    <img\r\n                        alt=\"...\"\r\n                        className=\"dots\"\r\n                        src={require(\"../../assets/img/dots.png\").default}\r\n                    />\r\n                    <img\r\n                        alt=\"...\"\r\n                        className=\"path\"\r\n                        src={require(\"../../assets/img/path4.png\").default}\r\n                    />\r\n                    <Container className=\"align-items-center\">\r\n                        <Row>\r\n                            <Col lg=\"6\" md=\"6\">\r\n                                <h1 className=\"profile-title text-left\" style={{lineBreak:\"anywhere\"}}>{account}</h1>\r\n                                <h5 className=\"text-on-back\">Admin</h5>\r\n\r\n                            </Col>\r\n                            <Col className=\"ml-auto mr-auto\" lg=\"4\" md=\"6\">\r\n                                <Card className=\"card-coin card-plain\">\r\n                                    <CardHeader>\r\n                                        <img\r\n                                            alt=\"...\"\r\n                                            className=\"img-center img-fluid rounded-circle\"\r\n                                            src={require(\"../../assets/img/profile.png\").default}\r\n                                        />\r\n                                        <h4 className=\"title\">Profile</h4>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\ProfilePage.js",["181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200"],"\nimport React, {useState} from \"react\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport {\n  Button,\n  Card,\n  CardHeader,\n  CardBody,\n  Label,\n  FormGroup,\n  Form,\n  Input,\n  FormText,\n  NavItem,\n  NavLink,\n  Nav,\n  Table,\n  TabContent,\n  TabPane,\n  Container,\n  Row,\n  Col,\n  UncontrolledTooltip,\n  UncontrolledCarousel, CardTitle,\n} from \"reactstrap\";\n\nimport Footer from \"../../components/Footer/Footer.js\";\nimport IndexNavbar from \"../../components/Navbars/IndexNavbar\";\nimport Web3 from \"web3\";\nimport Meme from \"../../abis/Meme.json\";\nimport ipfs from \"../../utils/ipfs\";\n\nconst carouselItems = [\n  {\n    src: require(\"../../assets/img/denys.jpg\").default,\n    altText: \"Slide 1\",\n    caption: \"Big City Life, United States\",\n  },\n  {\n    src: require(\"../../assets/img/fabien-bazanegue.jpg\").default,\n    altText: \"Slide 2\",\n    caption: \"Somewhere Beyond, United States\",\n  },\n  {\n    src: require(\"../../assets/img/mark-finn.jpg\").default,\n    altText: \"Slide 3\",\n    caption: \"Stocks, United States\",\n  },\n];\n\nlet ps = null;\n\nexport default function ProfilePage() {\n  const [tabs, setTabs] = React.useState(1);\n  const [loadweb3s, setLoadweb3s] = useState('');\n  const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\n  const [account, setAccount] = useState('');\n  const [buffer, setBuffer] = useState(null);\n  const [contarct, setContarct] = useState(null);\n  const [memeHash, setmemeHash] = useState('null');\n\n\n  React.useEffect(() => {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      document.documentElement.className += \" perfect-scrollbar-on\";\n      document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n      let tables = document.querySelectorAll(\".table-responsive\");\n      for (let i = 0; i < tables.length; i++) {\n        ps = new PerfectScrollbar(tables[i]);\n      }\n    }\n    document.body.classList.toggle(\"profile-page\");\n\n    if(!loadweb3s) {\n      loadWeb3();\n    }\n    if(!loadBlockchainDates) {\n      loadBlockchainDate();\n    }\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n        document.documentElement.className += \" perfect-scrollbar-off\";\n        document.documentElement.classList.remove(\"perfect-scrollbar-on\");\n      }\n      document.body.classList.toggle(\"profile-page\");\n    };\n  },[]);\n\n  const loadWeb3 = async () => {\n    console.log(\"hello\");\n    if(window.ethereum){\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    } if(window.web3){\n      window.web3 = new Web3(window.web3.currentProvider)\n    }else{\n      window.alert('Please use Metamask');\n    }\n  };\n\n  const loadBlockchainDate = async () => {\n    const web3 = window.web3\n    const accounts = await web3.eth.getAccounts()\n    setAccount(accounts[0])\n    const networkId = await web3.eth.net.getId()\n    const networkData = Meme.networks[networkId]\n    if(networkData){\n      const abi = Meme.abi\n      const address = networkData.address\n      const contract = web3.eth.Contract(abi,address)\n      setContarct(contract)\n      const memeHash = await contract.methods.get().call()\n      setmemeHash(memeHash)\n    }else{\n      window.alert(\"Smart contract not deployed to the detected network\")\n    }\n  };\n\n  const captureFile = (event) =>{\n    event.preventDefault();\n    const  file = event.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n\n    reader.onloadend = () =>{\n      setBuffer(Buffer(reader.result))\n    }\n  }\n\n  const onSubmit = async (event) =>{\n    event.preventDefault();\n    console.log('form submitting');\n\n    const added = await ipfs.add(buffer)\n    // const val = new CID(added.path).toV1().toString('base32')\n    const val = added.path\n    const memeHashs = val;\n\n    await contarct.methods.set(memeHashs).send({from:account}).then((r)=>{\n      setmemeHash(memeHashs)\n      window.alert(\"hi\");\n    })\n  }\n\n\n  return (\n    <>\n      <IndexNavbar isadmin={\"false\"} isdoctor={\"false\"} ishome={\"true\"}/>\n      <div className=\"wrapper\">\n        <div className=\"page-header\">\n          <img\n            alt=\"...\"\n            className=\"dots\"\n            src={require(\"../../assets/img/dots.png\").default}\n          />\n          <img\n            alt=\"...\"\n            className=\"path\"\n            src={require(\"../../assets/img/path4.png\").default}\n          />\n          <Container className=\"align-items-center\">\n            <Row>\n              <Col lg=\"6\" md=\"6\">\n                <h1 className=\"profile-title text-left\" style={{lineBreak:\"anywhere\"}}>{account}</h1>\n                <h5 className=\"text-on-back\">Role</h5>\n\n              </Col>\n              <Col className=\"ml-auto mr-auto\" lg=\"4\" md=\"6\">\n                <Card className=\"card-coin card-plain\">\n                  <CardHeader>\n                    <img\n                      alt=\"...\"\n                      className=\"img-center img-fluid rounded-circle\"\n                      src={`https://ipfs.infura.io:5001/api/v0/cat?arg=${memeHash}`}\n                    />\n                    <h4 className=\"title\">Profile</h4>\n                  </CardHeader>\n                  <CardBody>\n                    <form onSubmit={onSubmit}>\n                      <input type=\"file\" onChange={captureFile}/>\n                      <input type=\"submit\"/>\n                    </form>\n                  </CardBody>\n                </Card>\n              </Col>\n            </Row>\n          </Container>\n        </div>\n        <section className=\"section section-lg\">\n          <section className=\"section\">\n            <img\n                alt=\"...\"\n                className=\"path\"\n                src={require(\"../../assets/img/path4.png\").default}\n            />\n            <Container>\n              <Row className=\"row-grid justify-content-between\">\n                <Col className=\"mt-lg-5\" md=\"5\">\n                  <Row>\n                    <Col className=\"px-2 py-2\" lg=\"6\" sm=\"12\">\n                      <Card className=\"card-stats\">\n                        <CardBody>\n                          <Row>\n                            <Col md=\"4\" xs=\"5\">\n                              <div className=\"icon-big text-center icon-warning\">\n                                <i className=\"tim-icons icon-single-02 text-warning\" />\n                              </div>\n                            </Col>\n                            <Col md=\"8\" xs=\"7\">\n                              <div className=\"numbers\">\n                                <CardTitle tag=\"p\">3,237</CardTitle>\n                                <p />\n                                <p className=\"card-category\">Doctors</p>\n                              </div>\n                            </Col>\n                          </Row>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                    <Col className=\"px-2 py-2\" lg=\"6\" sm=\"12\">\n                      <Card className=\"card-stats upper bg-default\">\n                        <CardBody>\n                          <Row>\n                            <Col md=\"4\" xs=\"5\">\n                              <div className=\"icon-big text-center icon-warning\">\n                                <i className=\"tim-icons icon-single-02 text-white\" />\n                              </div>\n                            </Col>\n                            <Col md=\"8\" xs=\"7\">\n                              <div className=\"numbers\">\n                                <CardTitle tag=\"p\">3,653</CardTitle>\n                                <p />\n                                <p className=\"card-category\">patient</p>\n                              </div>\n                            </Col>\n                          </Row>\n                        </CardBody>\n                      </Card>\n                    </Col>\n                  </Row>\n\n                </Col>\n                <Col md=\"6\">\n                  <div className=\"pl-md-5\">\n                    <h1>\n                      Large <br />\n                      Achivements\n                    </h1>\n                    <p>\n                      I should be capable of drawing a single stroke at the\n                      present moment; and yet I feel that I never was a greater\n                      artist than now.\n                    </p>\n                    <br />\n                    <p>\n                      When, while the lovely valley teems with vapour around me,\n                      and the meridian sun strikes the upper surface of the\n                      impenetrable foliage of my trees, and but a few stray.\n                    </p>\n                    <br />\n                    <a\n                        className=\"font-weight-bold text-info mt-5\"\n                        href=\"#pablo\"\n                        onClick={(e) => e.preventDefault()}\n                    >\n                      Show all{\" \"}\n                      <i className=\"tim-icons icon-minimal-right text-info\" />\n                    </a>\n                  </div>\n                </Col>\n              </Row>\n            </Container>\n          </section>\n        </section>\n\n        <Footer />\n      </div>\n    </>\n  );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\AddDoctor.js",["201","202","203","204"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\n\r\nexport default function AddDoctor() {\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            const adminId = await contract.methods.getAdmin().call()\r\n\r\n            if(adminId == accounts[0]){\r\n                setIsAdmin('false')\r\n            }else{\r\n                // Swal.fire({\r\n                //     icon: 'error',\r\n                //     title: 'Oops...',\r\n                //     text: 'Only Admin have access!',\r\n                // }).then((value)=>{\r\n                //     // history.push(\"/home\")\r\n                //     window.location.href=\"/index\";\r\n                // });\r\n            }\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                age: '',\r\n                city: '',\r\n                state: '',\r\n                country: '',\r\n                mobile: '',\r\n                accid: '',\r\n                Speciality: '',\r\n                qualification: '',\r\n                regno:'',\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                firstName: Yup.string()\r\n                    .max(15, 'Must be 15 characters or less')\r\n                    .required('Required'),\r\n                lastName: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                email: Yup.string().email('Invalid email address').required('Required'),\r\n                age: Yup.number()\r\n                    .required('Required')\r\n                    .test(\r\n                        'Is 20+?',\r\n                        'Age must be greater than 20!',\r\n                        (value) => value >= 20\r\n                    ),\r\n                city: Yup.string()\r\n                    .required('Required'),\r\n                state: Yup.string()\r\n                    .required('Required'),\r\n                country: Yup.string()\r\n                    .required('Required'),\r\n                mobile: Yup.string().matches(phoneRegExp, 'Mobile number is not valid'),\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n                Speciality: Yup.string()\r\n                    .required('Required'),\r\n                qualification: Yup.string()\r\n                    .required('Required'),\r\n                regno: Yup.string()\r\n                    .required('Required'),\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                await ipfs.add(result).then(\r\n                    hash => {\r\n                        console.log(hash.path)\r\n\r\n                        contract.methods.addDrInfo(values.accid,hash.path).send({from: account})\r\n                            .on(\"confirmation\", (r) => {\r\n                                console.log(\"Doctor Added Successfully\")\r\n                                Swal.fire({\r\n                                    icon: 'success',\r\n                                    title: 'Success',\r\n                                    text: 'Doctor Registered Successfully!',\r\n                                })\r\n                                window.location.reload();\r\n                            }).on(\"error\",(er)=>{\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: '1.Only Admin can Add Users\\n2.This id Already have a role',\r\n                            })\r\n                            window.location.reload();\r\n                        });\r\n                    });\r\n            },\r\n\r\n        });\r\n        return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <Row>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>First Name</label>\r\n                        <Input\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.firstName}\r\n                        />\r\n                        {formik.touched.firstName && formik.errors.firstName ? (\r\n                            <div>{formik.errors.firstName}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Last Name</label>\r\n                        <Input\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.lastName}\r\n                        />\r\n                        {formik.touched.lastName && formik.errors.lastName ? (\r\n                            <div>{formik.errors.lastName}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <FormGroup>\r\n                        <label>Email</label>\r\n                        <Input\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div>{formik.errors.email}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Age</label>\r\n                        <Input\r\n                            id=\"age\"\r\n                            name=\"age\"\r\n                            type=\"number\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.age}\r\n                        />\r\n                        {formik.touched.age && formik.errors.age ? (\r\n                            <div>{formik.errors.age}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Mobile</label>\r\n                        <Input\r\n                            id=\"mobile\"\r\n                            name=\"mobile\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.mobile}\r\n                        />\r\n                        {formik.touched.mobile && formik.errors.mobile ? (\r\n                            <div>{formik.errors.mobile}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"4\">\r\n                    <FormGroup>\r\n                        <label>City</label>\r\n                        <Input\r\n                            id=\"city\"\r\n                            name=\"city\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.city}\r\n                        />\r\n                        {formik.touched.city && formik.errors.city ? (\r\n                            <div>{formik.errors.city}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                    <FormGroup>\r\n                        <label>State</label>\r\n                        <Input\r\n                            id=\"state\"\r\n                            name=\"state\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.state}\r\n                        />\r\n                        {formik.touched.state && formik.errors.state ? (\r\n                            <div>{formik.errors.state}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                    <FormGroup>\r\n                        <label>Country</label>\r\n                        <Input\r\n                            id=\"country\"\r\n                            name=\"country\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.country}\r\n                        />\r\n                        {formik.touched.country && formik.errors.country ? (\r\n                            <div>{formik.errors.country}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <FormGroup>\r\n                        <label>Account Id</label>\r\n                        <Input\r\n                            id=\"accid\"\r\n                            name=\"accid\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.accid}\r\n                        />\r\n                        {formik.touched.accid && formik.errors.accid ? (\r\n                            <div>{formik.errors.accid}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Speciality</label>\r\n                        <Input\r\n                            id=\"Speciality\"\r\n                            name=\"Speciality\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.Speciality}\r\n                        />\r\n                        {formik.touched.Speciality && formik.errors.Speciality ? (\r\n                            <div>{formik.errors.Speciality}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Register No</label>\r\n                        <Input\r\n                            id=\"regno\"\r\n                            name=\"regno\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.regno}\r\n                        />\r\n                        {formik.touched.regno && formik.errors.regno ? (\r\n                            <div>{formik.errors.regno}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <FormGroup>\r\n                        <label>Qualification</label>\r\n                        <Input\r\n                            id=\"qualification\"\r\n                            name=\"qualification\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.qualification}\r\n                        />\r\n                        {formik.touched.qualification && formik.errors.qualification ? (\r\n                            <div>{formik.errors.qualification}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Button\r\n                className=\"btn-round float-right\"\r\n                color=\"primary\"\r\n                data-placement=\"right\"\r\n                id=\"tooltip341148792\"\r\n                type=\"submit\"\r\n            >\r\n                Add Doctor\r\n            </Button>\r\n        </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"} isdoctor={\"false\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">AddDoctor</h1>\r\n                                        <h5 className=\"text-on-back\">DR</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\DoctorProfile.js",["205","206","207","208","209","210","211","212","213","214","215","216","217"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    UncontrolledTooltip,\r\n    CardTitle,\r\n} from \"reactstrap\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport histroy from \"../../../utils/histroy\";\r\nimport axios from \"axios\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport QRCode from 'qrcode.react';\r\nlet ps = null;\r\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\r\n\r\nexport default function DoctorProfile() {\r\n    const [isDoctor, setIsDoctor] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState('');\r\n    const [contract, setContract] = useState(null);\r\n    const [details,setDetails] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        age: '',\r\n        city: '',\r\n        state: '',\r\n        country: '',\r\n        mobile: '',\r\n        accid: '',\r\n        Speciality: '',\r\n        qualification: '',\r\n        regno:'',\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            try {\r\n                const  result = await contract.methods.isDr(accounts[0]).call()\r\n                console.log(result)\r\n                if(result=== \"1\"){\r\n                    setIsDoctor(true)\r\n                }\r\n                else{\r\n                    Swal.fire({\r\n                        icon: 'error',\r\n                        title: 'Oops...',\r\n                        text: 'Only Doctor have access!',\r\n                    }).then((value)=>{\r\n                        window.location.href=\"/index\";\r\n                    });\r\n                }\r\n            } catch (error) {\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Only Doctor have access!',\r\n                }).then((value)=>{\r\n                    window.location.href=\"/index\";\r\n                });\r\n            }\r\n            await contract.methods.getDr(accounts[0]).call().then(value =>{\r\n                console.log(\"Doctor info hash : \",value)\r\n                axios.get(baseURL+value).then((response) => {\r\n                    setDetails(response.data);\r\n                    console.log(response.data);\r\n                });\r\n\r\n            })\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n    const downloadQR = () => {\r\n        const canvas = document.getElementById(account);\r\n        const pngUrl = canvas\r\n            .toDataURL(\"image/png\")\r\n            .replace(\"image/png\", \"image/octet-stream\");\r\n        let downloadLink = document.createElement(\"a\");\r\n        downloadLink.href = pngUrl;\r\n        downloadLink.download = account + \".png\";\r\n        document.body.appendChild(downloadLink);\r\n        downloadLink.click();\r\n        document.body.removeChild(downloadLink);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"false\"} isdoctor={\"true\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n                <div className=\"page-header\">\r\n                    <img\r\n                        alt=\"...\"\r\n                        className=\"dots\"\r\n                        src={require(\"../../../assets/img/dots.png\").default}\r\n                    />\r\n                    <img\r\n                        alt=\"...\"\r\n                        className=\"path\"\r\n                        src={require(\"../../../assets/img/path4.png\").default}\r\n                    />\r\n                    <Container className=\"align-items-center\">\r\n                        <Row>\r\n                            <Col lg=\"6\" md=\"6\">\r\n                                <h1 className=\"profile-title text-left\" style={{lineBreak:\"anywhere\"}}>{details.firstName + ' ' +details.lastName + ' ' + details.qualification}</h1>\r\n                                <h5 className=\"text-on-back\">DR</h5>\r\n\r\n                            </Col>\r\n                            <Col className=\"ml-auto mr-auto\" lg=\"6\" md=\"6\">\r\n                                <Card className=\"card-coin card-plain\">\r\n                                    <CardHeader>\r\n                                        <img\r\n                                            alt=\"...\"\r\n                                            className=\"img-center img-fluid rounded-circle\"\r\n                                            src={require(\"../../../assets/img/profile.png\").default}\r\n                                        />\r\n                                        <h4 className=\"title\">Profile <a href=\"/Doctor_edit\" style={{cursor:\"pointer\"}}><i className=\"tim-icons icon-pencil\"></i></a></h4>\r\n                                        <p className=\"text-center\">{details.email}</p>\r\n                                        <p className=\"text-center\">Age: {details.age}</p>\r\n                                        <p className=\"text-center\">{details.Speciality}</p>\r\n                                        <p className=\"text-center\">{details.mobile}</p>\r\n                                        <p className=\"text-center\">{details.city +', '+ details.state + ', '+ details.country }</p>\r\n                                        <blockquote className=\"blockquote\">\r\n                                            <div>\r\n                                                <QRCode\r\n                                                    id={account}\r\n                                                    value={account}\r\n                                                    size={290}\r\n                                                    level={\"H\"}\r\n                                                    includeMargin={true}\r\n                                                />\r\n                                                <a onClick={downloadQR} style={{display:\"block\",textAlign:\"center\",cursor:\"pointer\"}}> Download QR </a>\r\n                                            </div>\r\n                                        </blockquote>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\DoctorEdit.js",["218","219","220"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n    Button,\r\n\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\r\n\r\nexport default function DoctorEdit() {\r\n    const [Drinfo, setDrinfo] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [details,setDetails] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        age: '',\r\n        city: '',\r\n        state: '',\r\n        country: '',\r\n        mobile: '',\r\n        accid: '',\r\n        Speciality: '',\r\n        qualification: '',\r\n        regno:'',\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n        if(!Drinfo){\r\n            // getDrInfo();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            // const memeHash = await contract.methods.get().call()\r\n            // console.log(\"Value\",memeHash)\r\n\r\n            await contract.methods.getDr(accounts[0]).call().then(value =>{\r\n                console.log(\"Doctor info hash : \",value)\r\n                axios.get(baseURL+value).then((response) => {\r\n                    setDetails(response.data);\r\n                    console.log(response.data);\r\n                });\r\n\r\n            })\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                firstName: details.firstName,\r\n                lastName: details.lastName,\r\n                email: details.email,\r\n                age: details.age,\r\n                city: details.city,\r\n                state: details.state,\r\n                country: details.country,\r\n                mobile: details.mobile,\r\n                accid: details.accid,\r\n                Speciality: details.Speciality,\r\n                qualification: details.qualification,\r\n                regno:details.regno,\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                firstName: Yup.string()\r\n                    .max(15, 'Must be 15 characters or less')\r\n                    .required('Required'),\r\n                lastName: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                email: Yup.string().email('Invalid email address').required('Required'),\r\n                age: Yup.number()\r\n                    .required('Required')\r\n                    .test(\r\n                        'Is 20+?',\r\n                        'Age must be greater than 20!',\r\n                        (value) => value >= 20\r\n                    ),\r\n                city: Yup.string()\r\n                    .required('Required'),\r\n                state: Yup.string()\r\n                    .required('Required'),\r\n                country: Yup.string()\r\n                    .required('Required'),\r\n                mobile: Yup.string().matches(phoneRegExp, 'Mobile number is not valid'),\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n                Speciality: Yup.string()\r\n                    .required('Required'),\r\n                qualification: Yup.string()\r\n                    .required('Required'),\r\n                regno: Yup.string()\r\n                    .required('Required'),\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                console.log(result);\r\n\r\n                await ipfs.add(result).then(\r\n                    hash => {\r\n                        console.log(hash.path)\r\n                        contract.methods.updateInfo(values.accid,hash.path).send({from: account})\r\n                            .on(\"confirmation\", (r) => {\r\n                                Swal.fire({\r\n                                    icon: 'success',\r\n                                    title: 'Success',\r\n                                    text: 'Your Info Updated Successfully!',\r\n                                })\r\n                                window.location.reload();\r\n                            }).on(\"error\",(er)=>{\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: 'Something Went wrong',\r\n                            })\r\n                            window.location.reload();\r\n                        });\r\n                    });\r\n            },\r\n\r\n        });\r\n        return (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>First Name</label>\r\n                            <Input\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.firstName}\r\n                            />\r\n                            {formik.touched.firstName && formik.errors.firstName ? (\r\n                                <div>{formik.errors.firstName}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Last Name</label>\r\n                            <Input\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.lastName}\r\n                            />\r\n                            {formik.touched.lastName && formik.errors.lastName ? (\r\n                                <div>{formik.errors.lastName}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Email</label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                type=\"hidden\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.email}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div>{formik.errors.email}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Age</label>\r\n                            <Input\r\n                                id=\"age\"\r\n                                name=\"age\"\r\n                                type=\"number\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.age}\r\n                            />\r\n                            {formik.touched.age && formik.errors.age ? (\r\n                                <div>{formik.errors.age}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Mobile</label>\r\n                            <Input\r\n                                id=\"mobile\"\r\n                                name=\"mobile\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.mobile}\r\n                            />\r\n                            {formik.touched.mobile && formik.errors.mobile ? (\r\n                                <div>{formik.errors.mobile}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>City</label>\r\n                            <Input\r\n                                id=\"city\"\r\n                                name=\"city\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.city}\r\n                            />\r\n                            {formik.touched.city && formik.errors.city ? (\r\n                                <div>{formik.errors.city}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>State</label>\r\n                            <Input\r\n                                id=\"state\"\r\n                                name=\"state\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.state}\r\n                            />\r\n                            {formik.touched.state && formik.errors.state ? (\r\n                                <div>{formik.errors.state}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>Country</label>\r\n                            <Input\r\n                                id=\"country\"\r\n                                name=\"country\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.country}\r\n                            />\r\n                            {formik.touched.country && formik.errors.country ? (\r\n                                <div>{formik.errors.country}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <Input\r\n                                id=\"accid\"\r\n                                name=\"accid\"\r\n                                type=\"hidden\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.accid}\r\n                            />\r\n                            {formik.touched.accid && formik.errors.accid ? (\r\n                                <div>{formik.errors.accid}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Speciality</label>\r\n                            <Input\r\n                                id=\"Speciality\"\r\n                                name=\"Speciality\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.Speciality}\r\n                            />\r\n                            {formik.touched.Speciality && formik.errors.Speciality ? (\r\n                                <div>{formik.errors.Speciality}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <Input\r\n                                id=\"regno\"\r\n                                name=\"regno\"\r\n                                type=\"hidden\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.regno}\r\n                            />\r\n                            {formik.touched.regno && formik.errors.regno ? (\r\n                                <div>{formik.errors.regno}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <Input\r\n                                id=\"qualification\"\r\n                                name=\"qualification\"\r\n                                type=\"hidden\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.qualification}\r\n                            />\r\n                            {formik.touched.qualification && formik.errors.qualification ? (\r\n                                <div>{formik.errors.qualification}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                <Button\r\n                    className=\"btn-round float-right\"\r\n                    color=\"primary\"\r\n                    data-placement=\"right\"\r\n                    id=\"tooltip341148792\"\r\n                    type=\"submit\"\r\n                >\r\n                    Update\r\n                </Button>\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"false\"} isdoctor={\"true\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">{details.firstName + ' ' +details.lastName}</h1>\r\n                                        <h5 className=\"text-on-back\">DR</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\DoctorInfo.js",["221","222","223"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n   FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\r\n\r\nexport default function DoctorInfo() {\r\n    const [Drinfo, setDrinfo] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [details,setDetails] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        age: '',\r\n        city: '',\r\n        state: '',\r\n        country: '',\r\n        mobile: '',\r\n        accid: '',\r\n        Speciality: '',\r\n        qualification: '',\r\n        regno:'',\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n        if(!Drinfo){\r\n            // getDrInfo();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            // const memeHash = await contract.methods.get().call()\r\n            // console.log(\"Value\",memeHash)\r\n\r\n            await contract.methods.getDrInfo().call().then(value =>{\r\n                console.log(\"Doctor info hash : \",value)\r\n                axios.get(baseURL+value).then((response) => {\r\n                    setDetails(response.data);\r\n                    console.log(details);\r\n                });\r\n\r\n            })\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n    // const getDrInfo = async () => {\r\n    //     console.log(account)\r\n    //     await contract.methods.getDrInfo().call().then(value =>{\r\n    //         console.log(\"Doctor info hash : \",value)\r\n    //         ipfs.cat(value).then(data =>{\r\n    //             console.log(data)\r\n    //             var val = JSON.parse(data)\r\n    //\r\n    //\r\n    //         })\r\n    //     })\r\n    // };\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                firstName: details.firstName,\r\n                lastName: details.lastName,\r\n                email: details.email,\r\n                age: details.age,\r\n                city: details.city,\r\n                state: details.state,\r\n                country: details.country,\r\n                mobile: details.mobile,\r\n                accid: details.accid,\r\n                Speciality: details.Speciality,\r\n                qualification: details.qualification,\r\n                regno:details.regno,\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                firstName: Yup.string()\r\n                    .max(15, 'Must be 15 characters or less')\r\n                    .required('Required'),\r\n                lastName: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                email: Yup.string().email('Invalid email address').required('Required'),\r\n                age: Yup.number()\r\n                    .required('Required')\r\n                    .test(\r\n                        'Is 20+?',\r\n                        'Age must be greater than 20!',\r\n                        (value) => value >= 20\r\n                    ),\r\n                city: Yup.string()\r\n                    .required('Required'),\r\n                state: Yup.string()\r\n                    .required('Required'),\r\n                country: Yup.string()\r\n                    .required('Required'),\r\n                mobile: Yup.string().matches(phoneRegExp, 'Mobile number is not valid'),\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n                Speciality: Yup.string()\r\n                    .required('Required'),\r\n                qualification: Yup.string()\r\n                    .required('Required'),\r\n                regno: Yup.string()\r\n                    .required('Required'),\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                await ipfs.add(result).then(\r\n                    hash => {\r\n                        console.log(hash.path)\r\n                        contract.methods.addDrInfo(values.accid,hash.path).send({from: account})\r\n                            .on(\"confirmation\", (r) => {\r\n                                console.log(\"Doctor Added Successfully\")\r\n                                Swal.fire({\r\n                                    icon: 'success',\r\n                                    title: 'Success',\r\n                                    text: 'Doctor Registered Successfully!',\r\n                                })\r\n                                window.location.reload();\r\n                            }).on(\"error\",(er)=>{\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: '1.Only Admin can Add Users\\n2.This id Already have a role',\r\n                            })\r\n                            window.location.reload();\r\n                        });\r\n                    });\r\n            },\r\n\r\n        });\r\n        return (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>First Name</label>\r\n                            <Input\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.firstName}\r\n                            />\r\n                            {formik.touched.firstName && formik.errors.firstName ? (\r\n                                <div>{formik.errors.firstName}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Last Name</label>\r\n                            <Input\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.lastName}\r\n                            />\r\n                            {formik.touched.lastName && formik.errors.lastName ? (\r\n                                <div>{formik.errors.lastName}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Email</label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.email}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div>{formik.errors.email}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Age</label>\r\n                            <Input\r\n                                id=\"age\"\r\n                                name=\"age\"\r\n                                type=\"number\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.age}\r\n                            />\r\n                            {formik.touched.age && formik.errors.age ? (\r\n                                <div>{formik.errors.age}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Mobile</label>\r\n                            <Input\r\n                                id=\"mobile\"\r\n                                name=\"mobile\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.mobile}\r\n                            />\r\n                            {formik.touched.mobile && formik.errors.mobile ? (\r\n                                <div>{formik.errors.mobile}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>City</label>\r\n                            <Input\r\n                                id=\"city\"\r\n                                name=\"city\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.city}\r\n                            />\r\n                            {formik.touched.city && formik.errors.city ? (\r\n                                <div>{formik.errors.city}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>State</label>\r\n                            <Input\r\n                                id=\"state\"\r\n                                name=\"state\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.state}\r\n                            />\r\n                            {formik.touched.state && formik.errors.state ? (\r\n                                <div>{formik.errors.state}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>Country</label>\r\n                            <Input\r\n                                id=\"country\"\r\n                                name=\"country\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.country}\r\n                            />\r\n                            {formik.touched.country && formik.errors.country ? (\r\n                                <div>{formik.errors.country}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Account Id</label>\r\n                            <Input\r\n                                id=\"accid\"\r\n                                name=\"accid\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.accid}\r\n                            />\r\n                            {formik.touched.accid && formik.errors.accid ? (\r\n                                <div>{formik.errors.accid}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Speciality</label>\r\n                            <Input\r\n                                id=\"Speciality\"\r\n                                name=\"Speciality\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.Speciality}\r\n                            />\r\n                            {formik.touched.Speciality && formik.errors.Speciality ? (\r\n                                <div>{formik.errors.Speciality}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Register No</label>\r\n                            <Input\r\n                                id=\"regno\"\r\n                                name=\"regno\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.regno}\r\n                            />\r\n                            {formik.touched.regno && formik.errors.regno ? (\r\n                                <div>{formik.errors.regno}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Qualification</label>\r\n                            <Input\r\n                                id=\"qualification\"\r\n                                name=\"qualification\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.qualification}\r\n                            />\r\n                            {formik.touched.qualification && formik.errors.qualification ? (\r\n                                <div>{formik.errors.qualification}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n                {/*<Button*/}\r\n                {/*    className=\"btn-round float-right\"*/}\r\n                {/*    color=\"primary\"*/}\r\n                {/*    data-placement=\"right\"*/}\r\n                {/*    id=\"tooltip341148792\"*/}\r\n                {/*    type=\"submit\"*/}\r\n                {/*>*/}\r\n                {/*    Add Doctor*/}\r\n                {/*</Button>*/}\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"} isdoctor={\"false\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">{details.firstName + ' ' +details.lastName}</h1>\r\n                                        <h5 className=\"text-on-back\">DR</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col md=\"6\" className=\"align-self-center\">\r\n\r\n                                    <Card className=\"card-coin card-plain\">\r\n                                        <CardHeader>\r\n                                            <img\r\n                                                alt=\"...\"\r\n                                                className=\"img-center img-fluid rounded-circle\"\r\n                                                src={require(\"../../../assets/img/mike.jpg\").default}\r\n                                            />\r\n                                            <h4 className=\"title\">Dr. {details.firstName + ' ' +details.lastName + ' ' + details.qualification}</h4>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            {/*<h6 className=\"profile-title text-left\"></h6>*/}\r\n                                            <h6>{details.Speciality}</h6>\r\n\r\n                                        </CardBody>\r\n                                    </Card>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\SearchDoctor.js",["224","225","226","227","228","229","230"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\n\r\nexport default function SearchDoctor() {\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            const adminId = await contract.methods.getAdmin().call()\r\n\r\n            if(adminId == accounts[0]){\r\n                setIsAdmin('false')\r\n            }else{\r\n                // Swal.fire({\r\n                //     icon: 'error',\r\n                //     title: 'Oops...',\r\n                //     text: 'Only Admin have access!',\r\n                // }).then((value)=>{\r\n                //     // history.push(\"/home\")\r\n                //     window.location.href=\"/index\";\r\n                // });\r\n            }\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                accid: '',\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                await contract.methods.search(values.accid).send({from : account})\r\n                    .on(\"confirmation\" ,(e)=>{\r\n                        window.location.href=\"/doctor\"\r\n                    }).on(\"error\",(err)=>{\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'The particular id is not a doctor',\r\n                        })\r\n\r\n                    })\r\n\r\n            },\r\n\r\n        });\r\n        return (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Account Id</label>\r\n                            <Input\r\n                                id=\"accid\"\r\n                                name=\"accid\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search with Hash code\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.accid}\r\n                            />\r\n                            {formik.touched.accid && formik.errors.accid ? (\r\n                                <div>{formik.errors.accid}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Button\r\n                    className=\"btn-round float-right\"\r\n                    color=\"primary\"\r\n                    data-placement=\"right\"\r\n                    id=\"tooltip341148792\"\r\n                    type=\"submit\"\r\n                >\r\n                    Search\r\n                </Button>\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"} isdoctor={\"false\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">Doctor</h1>\r\n                                        <h5 className=\"text-on-back\">DR</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\ViewRecords.js",["231","232","233","234","235","236","237","238","239","240","241","242"],"\nimport React, {useState} from \"react\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Container,\n    Row,\n    Col,\n    Table, DropdownItem,\n\n} from \"reactstrap\";\n\nimport Footer from \"../../../components/Footer/Footer.js\";\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\nimport Web3 from \"web3\";\nimport Meme from \"../../../abis/Meme.json\";\nimport Swal from \"sweetalert2\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport ipfs from \"../../../utils/ipfs\";\nimport axios from \"axios\";\nimport {Link} from \"react-router-dom\";\n\n\nlet ps = null;\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\n\nexport default function ViewRecords() {\n\n    const [loadweb3s, setLoadweb3s] = useState('');\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\n    const [account, setAccount] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [patID, setpatID] = useState('');\n    const [isDoctor, setIsDoctor] = useState(false);\n    const [isPatient, setIsPatient] = useState(false);\n    const [details,setDetails] = useState(null);\n    const [Data,setData] = useState([]);\n    console.log(Data);\n\n    React.useEffect(() => {\n        if (navigator.platform.indexOf(\"Win\") > -1) {\n            document.documentElement.className += \" perfect-scrollbar-on\";\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n            let tables = document.querySelectorAll(\".table-responsive\");\n            for (let i = 0; i < tables.length; i++) {\n                ps = new PerfectScrollbar(tables[i]);\n            }\n        }\n        document.body.classList.toggle(\"profile-page\");\n\n        if(!loadweb3s) {\n            loadWeb3();\n        }\n        if(!loadBlockchainDates) {\n            loadBlockchainDate();\n        }\n\n        return function cleanup() {\n\n            document.body.classList.toggle(\"profile-page\");\n        };\n    },[]);\n\n    const loadBlockchainDate = async () => {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        setAccount(accounts[0])\n        const networkId = await web3.eth.net.getId()\n        const networkData = Meme.networks[networkId]\n        if(networkData){\n            const abi = Meme.abi\n            const address = networkData.address\n            const contract = web3.eth.Contract(abi,address)\n            setContract(contract)\n            try {\n                const  result = await contract.methods.isDr(accounts[0]).call()\n                console.log(result)\n                if(result=== \"1\"){\n                    setIsDoctor(true)\n                }\n                else{\n                    Swal.fire({\n                        icon: 'error',\n                        title: 'Oops...',\n                        text: 'Only Doctor have access!',\n                    }).then((value)=>{\n                        window.location.href=\"/index\";\n                    });\n                }\n            } catch (error) {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: 'Only Doctor have access!',\n                }).then((value)=>{\n                    window.location.href=\"/index\";\n                });\n            }\n        }else{\n            window.alert(\"Smart contract not deployed to the detected network\")\n        }\n        window.ethereum.on('accountsChanged', function (accounts) {\n            window.location.reload()\n        })\n        setLoadBlockchainDates('true');\n\n    };\n\n    const loadWeb3 = async () => {\n        if(window.ethereum){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n        setLoadweb3s('true');\n    };\n\n    const SearchPatient = () => {\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n        const formik = useFormik({\n            initialValues: {\n                accid: '',\n            },\n\n            validationSchema: Yup.object({\n                accid: Yup.string()\n                    .max(42, 'Must be 20 characters')\n                    .min(42, 'Must be 20 characters')\n                    .required('Required'),\n            }),\n            onSubmit: async values => {\n                const result = JSON.stringify(values, null, 2);\n                setpatID(values.accid)\n                try {\n                    await contract.methods.getPatInfo(values.accid).call().then(value =>{\n                        axios.get(baseURL+value).then((response) => {\n                            setDetails([response.data]);\n                            setIsPatient(true);\n                        });\n                    })\n                } catch (error) {\n                    {\n                        Swal.fire({\n                            icon: 'warning',\n                            title: 'Not a Patient id',\n                            text: 'The patient id is not Present',\n                        }).then(()=>{\n                            window.location.href = \"add_record\";\n                        })\n                    }\n                }\n\n                await contract.methods.viewMedRec(values.accid).call().then( Hash =>{\n                    console.log(Hash)\n                    axios.get(baseURL+Hash).then((response) => {\n                        const respon = response.data;\n                        console.log('old_hash',respon)\n                        setData(respon);\n\n                    });\n\n                })\n\n            },\n\n        });\n        return (\n            <Form onSubmit={formik.handleSubmit}>\n\n                <Row>\n                    <Col md=\"12\">\n                        <FormGroup>\n                            <label>Account Id</label>\n                            <Input\n                                id=\"accid\"\n                                name=\"accid\"\n                                type=\"text\"\n                                placeholder=\"Search with Hash code\"\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                value={formik.values.accid}\n                            />\n                            {formik.touched.accid && formik.errors.accid ? (\n                                <div>{formik.errors.accid}</div>\n                            ) : null}\n                        </FormGroup>\n                    </Col>\n                </Row>\n\n\n                <Button\n                    className=\"btn-round float-right\"\n                    color=\"primary\"\n                    data-placement=\"right\"\n                    id=\"tooltip341148792\"\n                    type=\"submit\"\n                >\n                    Search\n                </Button>\n            </Form>\n        );\n    }\n\n    const detailsPage = (hash) =>{\n        console.log(hash);\n    }\n    return (\n        <>\n            <IndexNavbar  isadmin={\"false\"} isdoctor={\"false\"} ishome={\"false\"}/>\n            <div className=\"wrapper\">\n                {isDoctor\n                    ?\n                <section className=\"section\">\n                    <Container>\n                        <Row>\n                            <Col md=\"12\">\n                                <Card className=\"card-plain\">\n                                    <CardHeader>\n                                        <p className=\"text-on-back\" style={{fontSize:\"3em\"}}>Patient</p>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <SearchPatient />\n                                    </CardBody>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                    </Container>\n                </section>\n                    :<></>}\n                {isPatient\n                    ?\n                <section className=\"section\">\n                    <Container>\n                        <Row>\n                            <Col md=\"12\">\n                                <Card className=\"card-plain\">\n                                    <CardHeader>\n                                        <h5 className=\"text-on-back\" style={{fontSize:\"3em\"}}>Records</h5>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <Table>\n                                        <thead>\n                                            <tr>\n                                                <th className=\"text-center\">#</th>\n                                                <th>Doctor Address</th>\n                                                <th>Patient Address</th>\n                                                <th className=\"text-center\">Description</th>\n                                                <th className=\"text-right\">Actions</th>\n                                            </tr>\n                                        </thead>\n                                        <tbody>\n                                        {Data.map((records,i) => {\n                                            console.log(i,records[0]);\n                                            return(\n                                            <tr>\n                                                <td className=\"text-center\">{parseInt(i+1)}</td>\n                                                <td>{records[0].dr_id}</td>\n                                                <td>{records[0].pat_id}</td>\n                                                <td className=\"text-center\">{records[0].des}</td>\n\n                                                <td className=\"text-right\">\n                                                    <Button className=\"btn-simple\" onClick={ () => window.location.href=\"/details/\"+records[0].c_Hash} color=\"info\">\n                                                        View\n                                                    </Button>{` `}\n\n                                                </td>\n                                            </tr>\n                                            );\n                                        })}\n\n                                        </tbody>\n                                    </Table>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                    </Container>\n                </section>\n                    : <></> }\n                <Footer />\n            </div>\n        </>\n    );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\AddPatientrecords.js",["243","244","245","246","247","248","249"],"\nimport React, {useState,useEffect} from \"react\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Container,\n    Row,\n    Col,\n\n} from \"reactstrap\";\n\nimport Footer from \"../../../components/Footer/Footer.js\";\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\nimport Web3 from \"web3\";\nimport Meme from \"../../../abis/Meme.json\";\nimport Swal from \"sweetalert2\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport ipfs from \"../../../utils/ipfs\";\nimport axios from \"axios\";\n\n\nlet ps = null;\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\n\nexport default function AddPatientrecord() {\n\n    const [loadweb3s, setLoadweb3s] = useState('');\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\n    const [account, setAccount] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [patID, setpatID] = useState('');\n    const [isDoctor, setIsDoctor] = useState(false);\n    const [isPatient, setIsPatient] = useState(false);\n    const [AllHash, setAllHash]=useState([]);\n    console.log(\"AllHash\",AllHash)\n    const [details,setDetails] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        age: '',\n        city: '',\n        state: '',\n        country: '',\n        mobile: '',\n        accid: '',\n    });\n\n    React.useEffect(() => {\n\n        if (navigator.platform.indexOf(\"Win\") > -1) {\n            document.documentElement.className += \" perfect-scrollbar-on\";\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n            let tables = document.querySelectorAll(\".table-responsive\");\n            for (let i = 0; i < tables.length; i++) {\n                ps = new PerfectScrollbar(tables[i]);\n            }\n        }\n        document.body.classList.toggle(\"profile-page\");\n\n        if(!loadweb3s) {\n            loadWeb3();\n        }\n        if(!loadBlockchainDates) {\n            loadBlockchainDate();\n        }\n\n        return function cleanup() {\n\n            document.body.classList.toggle(\"profile-page\");\n        };\n    },[]);\n\n    const loadBlockchainDate = async () => {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        setAccount(accounts[0])\n        const networkId = await web3.eth.net.getId()\n        const networkData = Meme.networks[networkId]\n        if(networkData){\n            const abi = Meme.abi\n            const address = networkData.address\n            const contract = web3.eth.Contract(abi,address)\n            setContract(contract)\n            try {\n                const  result = await contract.methods.isDr(accounts[0]).call()\n                console.log(result)\n                if(result=== \"1\"){\n                    setIsDoctor(true)\n                }\n                else{\n                    Swal.fire({\n                        icon: 'error',\n                        title: 'Oops...',\n                        text: 'Only Doctor have access!',\n                    }).then((value)=>{\n                        window.location.href=\"/index\";\n                    });\n                }\n            } catch (error) {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: 'Only Doctor have access!',\n                }).then((value)=>{\n                    window.location.href=\"/index\";\n                });\n            }\n        }else{\n            window.alert(\"Smart contract not deployed to the detected network\")\n        }\n        window.ethereum.on('accountsChanged', function (accounts) {\n            window.location.reload()\n        })\n        setLoadBlockchainDates('true');\n\n    };\n\n    const loadWeb3 = async () => {\n        if(window.ethereum){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n        setLoadweb3s('true');\n    };\n\n    const SearchPatient = () => {\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n        const formik = useFormik({\n            initialValues: {\n                accid: '',\n            },\n\n            validationSchema: Yup.object({\n                accid: Yup.string()\n                    .max(42, 'Must be 20 characters')\n                    .min(42, 'Must be 20 characters')\n                    .required('Required'),\n            }),\n            onSubmit: async values => {\n                const result = JSON.stringify(values, null, 2);\n                setpatID(values.accid)\n                try {\n                    await contract.methods.getPatInfo(values.accid).call().then(value =>{\n                        axios.get(baseURL+value).then((response) => {\n                            setDetails(response.data);\n                            setIsPatient(true);\n                        });\n                    })\n                } catch (error) {\n                    {\n                        Swal.fire({\n                            icon: 'warning',\n                            title: 'Not a Patient id',\n                            text: 'The patient id is not Present',\n                        }).then(()=>{\n                            window.location.href = \"add_record\";\n                        })\n                    }\n                }\n                await contract.methods.viewMedRec(values.accid).call().then( Hash =>{\n                    console.log(Hash)\n                    axios.get(baseURL+Hash).then((response) => {\n                        const respon = response.data;\n                        console.log('old_hash',respon)\n                        setAllHash(respon);\n                    });\n\n                })\n                // await contract.methods.search(values.accid).send({from : account})\n                //     .on(\"confirmation\" ,(e)=>{\n                //         window.location.href=\"/doctor\"\n                //     }).on(\"error\",(err)=>{\n                //         Swal.fire({\n                //             icon: 'error',\n                //             title: 'Error',\n                //             text: 'The particular id is not a doctor',\n                //         })\n                //\n                //     })\n\n            },\n\n        });\n        return (\n            <Form onSubmit={formik.handleSubmit}>\n\n                <Row>\n                    <Col md=\"12\">\n                        <FormGroup>\n                            <label>Account Id</label>\n                            <Input\n                                id=\"accid\"\n                                name=\"accid\"\n                                type=\"text\"\n                                placeholder=\"Search with Hash code\"\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                value={formik.values.accid}\n                            />\n                            {formik.touched.accid && formik.errors.accid ? (\n                                <div>{formik.errors.accid}</div>\n                            ) : null}\n                        </FormGroup>\n                    </Col>\n                </Row>\n\n\n                <Button\n                    className=\"btn-round float-right\"\n                    color=\"primary\"\n                    data-placement=\"right\"\n                    id=\"tooltip341148792\"\n                    type=\"submit\"\n                >\n                    Search\n                </Button>\n            </Form>\n        );\n    }\n\n    const timeout = async (valuesToContract,accid) => {\n        const res =[valuesToContract];\n        setAllHash(AllHash => [...AllHash, res]);\n        const  hasharray = AllHash;\n        hasharray.push(res);\n        console.log(\"afterpush\",hasharray);\n        console.log(\"afterpushjson\",JSON.stringify(hasharray, null, 2));\n\n            await ipfs.add(JSON.stringify(hasharray, null, 2)).then(\n                    allhasH =>{\n                        console.log(\"IPFS all HASH :-\"+allhasH.path)\n                        contract.methods.addMedRecord(allhasH.path,accid).send({from: account}).on(\"confirmation\",\n                            (r) => {\n                                Swal.fire({\n                                    icon: 'success',\n                                    title: 'Success',\n                                    text: 'Medical record added Successfully!',\n                                }).then(()=>{\n                                    window.location.reload();\n                                })\n\n\n                            }).then((value)=>{\n                            window.location.reload();\n                        })\n                    })\n    }\n\n    const AddRecords = () => {\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\n        const formik = useFormik({\n            initialValues: {\n                firstName: details.firstName,\n                lastName: details.lastName,\n                email: details.email,\n                age: details.age,\n                city: details.city,\n                state: details.state,\n                country: details.country,\n                mobile: details.mobile,\n                accid: details.accid,\n                bp:'',\n                sugar:'',\n                weight:'',\n                fever:'',\n                notes:'',\n                testreport:'',\n                medicine:'',\n                des:'',\n\n\n            },\n\n            validationSchema: Yup.object({\n                firstName: Yup.string()\n                    .max(15, 'Must be 15 characters or less')\n                    .required('Required'),\n                lastName: Yup.string()\n                    .max(20, 'Must be 20 characters or less')\n                    .required('Required'),\n                email: Yup.string().email('Invalid email address').required('Required'),\n                age: Yup.number()\n                    .required('Required')\n                    .test(\n                        'Is 20+?',\n                        'Age must be greater than 20!',\n                        (value) => value >= 20\n                    ),\n                city: Yup.string()\n                    .required('Required'),\n                state: Yup.string()\n                    .required('Required'),\n                country: Yup.string()\n                    .required('Required'),\n                des: Yup.string()\n                    .required('Required')\n                    .max(20, 'Must be 15 characters or less'),\n\n                mobile: Yup.string().matches(phoneRegExp, 'Mobile number is not valid'),\n                accid: Yup.string()\n                    .max(42, 'Must be 20 characters')\n                    .min(42, 'Must be 20 characters')\n                    .required('Required')\n\n            }),\n            onSubmit: async values => {\n\n                    const dr_id = account;\n                    const pat_id = values.accid;\n                    const des = values.des;\n                    const valuesToSend = {\n                        ...values,\n                    }\n\n\n                const result = JSON.stringify(valuesToSend, null, 2);\n                console.log(result);\n\n\n                await ipfs.add(result).then(\n                    hash => {\n                        const AddedHash = hash.path;\n                        console.log(\"IPFS HASH :-+++++\",AddedHash);\n                        const c_Hash = AddedHash;\n                        const valuesToContract = {\n                            dr_id,\n                            pat_id,\n                            des,\n                            c_Hash\n                        }\n\n                        timeout(valuesToContract,values.accid)\n                    });\n\n\n\n\n                // await ipfs.add(result).then(\n                //     hash => {\n                //         console.log(hash.path)\n                //\n                //         contract.methods.addDrInfo(values.accid,hash.path).send({from: account})\n                //             .on(\"confirmation\", (r) => {\n                //                 console.log(\"Doctor Added Successfully\")\n                //                 Swal.fire({\n                //                     icon: 'success',\n                //                     title: 'Success',\n                //                     text: 'Doctor Registered Successfully!',\n                //                 })\n                //                 window.location.reload();\n                //             }).on(\"error\",(er)=>{\n                //             Swal.fire({\n                //                 icon: 'error',\n                //                 title: 'Error',\n                //                 text: '1.Only Admin can Add Users\\n2.This id Already have a role',\n                //             })\n                //             window.location.reload();\n                //         });\n                //     });\n            },\n\n        });\n        return (\n            <Form onSubmit={formik.handleSubmit}>\n                <Row>\n                    <Col md=\"6\">\n                        <Row>\n                            <Col md=\"6\">\n                                <FormGroup>\n                                    <label>First Name</label>\n                                    <Input\n                                        id=\"firstName\"\n                                        name=\"firstName\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.firstName}\n                                    />\n                                    {formik.touched.firstName && formik.errors.firstName ? (\n                                        <div>{formik.errors.firstName}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"6\">\n                                <FormGroup>\n                                    <label>Last Name</label>\n                                    <Input\n                                        id=\"lastName\"\n                                        name=\"lastName\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.lastName}\n                                    />\n                                    {formik.touched.lastName && formik.errors.lastName ? (\n                                        <div>{formik.errors.lastName}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"12\">\n                                <FormGroup>\n                                    <label>Email</label>\n                                    <Input\n                                        id=\"email\"\n                                        name=\"email\"\n                                        type=\"email\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.email}\n                                    />\n                                    {formik.touched.email && formik.errors.email ? (\n                                        <div>{formik.errors.email}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"6\">\n                                <FormGroup>\n                                    <label>Age</label>\n                                    <Input\n                                        id=\"age\"\n                                        name=\"age\"\n                                        type=\"number\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.age}\n                                    />\n                                    {formik.touched.age && formik.errors.age ? (\n                                        <div>{formik.errors.age}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"6\">\n                                <FormGroup>\n                                    <label>Mobile</label>\n                                    <Input\n                                        id=\"mobile\"\n                                        name=\"mobile\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.mobile}\n                                    />\n                                    {formik.touched.mobile && formik.errors.mobile ? (\n                                        <div>{formik.errors.mobile}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label>City</label>\n                                    <Input\n                                        id=\"city\"\n                                        name=\"city\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.city}\n                                    />\n                                    {formik.touched.city && formik.errors.city ? (\n                                        <div>{formik.errors.city}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label>State</label>\n                                    <Input\n                                        id=\"state\"\n                                        name=\"state\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.state}\n                                    />\n                                    {formik.touched.state && formik.errors.state ? (\n                                        <div>{formik.errors.state}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label>Country</label>\n                                    <Input\n                                        id=\"country\"\n                                        name=\"country\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.country}\n                                    />\n                                    {formik.touched.country && formik.errors.country ? (\n                                        <div>{formik.errors.country}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                    <Col md=\"12\">\n                        <FormGroup>\n                            <label>Account Id</label>\n                            <Input\n                                id=\"accid\"\n                                name=\"accid\"\n                                type=\"text\"\n                                onChange={formik.handleChange}\n                                onBlur={formik.handleBlur}\n                                value={formik.values.accid}\n                            />\n                            {formik.touched.accid && formik.errors.accid ? (\n                                <div>{formik.errors.accid}</div>\n                            ) : null}\n                        </FormGroup>\n                    </Col>\n                </Row>\n                    </Col>\n                    <Col md=\"6\" style={{BorderLeft:\"1px solid\"}}>\n                        <Row>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label>Blood pressure</label>\n                                    <Input\n                                        id=\"bp\"\n                                        name=\"bp\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.bp}\n                                    />\n\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label>Sugar</label>\n                                    <Input\n                                        id=\"sugar\"\n                                        name=\"sugar\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.sugar}\n                                    />\n\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"4\">\n                                <FormGroup>\n                                    <label>Weight</label>\n                                    <Input\n                                        id=\"weight\"\n                                        name=\"weight\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.weight}\n                                    />\n\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col md=\"6\">\n                                <FormGroup>\n                                    <label>Fever</label>\n                                    <Input\n                                        id=\"fever\"\n                                        name=\"fever\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.fever}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"6\">\n                                <FormGroup>\n                                    <label>Description</label>\n                                    <Input\n                                        id=\"des\"\n                                        name=\"des\"\n                                        type=\"text\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.des}\n                                    />\n                                    {formik.touched.des && formik.errors.des ? (\n                                        <div>{formik.errors.des}</div>\n                                    ) : null}\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"12\">\n                                <FormGroup>\n                                    <label>Test Report</label>\n                                    <Input\n                                        id=\"testreport\"\n                                        name=\"testreport\"\n                                        type=\"textarea\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.testreport}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"12\">\n                                <FormGroup>\n                                    <label>Medicine Report</label>\n                                    <Input\n                                        id=\"medicine\"\n                                        name=\"medicine\"\n                                        type=\"textarea\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.medicine}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col md=\"12\">\n                                <FormGroup>\n                                    <label>Notes</label>\n                                    <Input\n                                        id=\"notes\"\n                                        name=\"notes\"\n                                        type=\"textarea\"\n                                        onChange={formik.handleChange}\n                                        onBlur={formik.handleBlur}\n                                        value={formik.values.notes}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Button\n                            className=\"btn-round float-right\"\n                            color=\"primary\"\n                            data-placement=\"right\"\n                            id=\"tooltip341148792\"\n                            type=\"submit\"\n                        >\n                            Save\n                        </Button>\n                    </Col>\n\n                </Row>\n            </Form>\n        );\n    }\n    return (\n        <>\n            <IndexNavbar  isadmin={\"false\"} isdoctor={\"true\"} ishome={\"false\"}/>\n            <div className=\"wrapper\">\n                {isDoctor\n                    ?\n                <section className=\"section\">\n                    <Container>\n                        <Row>\n                            <Col md=\"12\">\n                                <Card className=\"card-plain\">\n                                    <CardHeader>\n                                        <p className=\"text-on-back\" style={{fontSize:\"3em\"}}>Patient</p>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <SearchPatient />\n                                    </CardBody>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                    </Container>\n                </section>\n                    :<></>}\n                {isPatient\n                    ?\n                <section className=\"section\">\n                    <Container>\n                        <Row>\n                            <Col md=\"12\">\n                                <Card className=\"card-plain\">\n                                    <CardHeader>\n                                        <h5 className=\"text-on-back\" style={{fontSize:\"3em\"}}>Records</h5>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <AddRecords />\n                                    </CardBody>\n                                </Card>\n                            </Col>\n\n                        </Row>\n                    </Container>\n                </section>\n                    : <></> }\n                <Footer />\n            </div>\n        </>\n    );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\AddPatient.js",["250","251","252","253"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\n\r\nexport default function AddPatient() {\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            const adminId = await contract.methods.getAdmin().call()\r\n\r\n            if(adminId == accounts[0]){\r\n                setIsAdmin('false')\r\n            }else{\r\n                // Swal.fire({\r\n                //     icon: 'error',\r\n                //     title: 'Oops...',\r\n                //     text: 'Only Admin have access!',\r\n                // }).then((value)=>{\r\n                //     // history.push(\"/home\")\r\n                //     window.location.href=\"/index\";\r\n                // });\r\n            }\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n    const AddPatientForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                firstName: '',\r\n                lastName: '',\r\n                email: '',\r\n                age: '',\r\n                city: '',\r\n                state: '',\r\n                country: '',\r\n                mobile: '',\r\n                accid: '',\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                firstName: Yup.string()\r\n                    .max(15, 'Must be 15 characters or less')\r\n                    .required('Required'),\r\n                lastName: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                email: Yup.string().email('Invalid email address').required('Required'),\r\n                age: Yup.number()\r\n                    .required('Required')\r\n                    .test(\r\n                        'Is 20+?',\r\n                        'Age must be greater than 20!',\r\n                        (value) => value >= 20\r\n                    ),\r\n                city: Yup.string()\r\n                    .required('Required'),\r\n                state: Yup.string()\r\n                    .required('Required'),\r\n                country: Yup.string()\r\n                    .required('Required'),\r\n                mobile: Yup.string().matches(phoneRegExp, 'Mobile number is not valid'),\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                await ipfs.add(result).then(\r\n                    hash => {\r\n                        console.log(hash.path)\r\n                        contract.methods.addPatInfo(values.accid,hash.path).send({from: account})\r\n                            .on(\"confirmation\", (r) => {\r\n                                console.log(\"Patient Added Successfully\")\r\n                                Swal.fire({\r\n                                    icon: 'success',\r\n                                    title: 'Success',\r\n                                    text: 'Patient Registered Successfully!',\r\n                                })\r\n                                window.location.reload();\r\n                            }).on(\"error\",(er)=>{\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: 'This id Already have a role',\r\n                            })\r\n                            // window.location.reload();\r\n                        });\r\n                    });\r\n            },\r\n\r\n        });\r\n        return (\r\n        <Form onSubmit={formik.handleSubmit}>\r\n            <Row>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>First Name</label>\r\n                        <Input\r\n                            id=\"firstName\"\r\n                            name=\"firstName\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.firstName}\r\n                        />\r\n                        {formik.touched.firstName && formik.errors.firstName ? (\r\n                            <div>{formik.errors.firstName}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Last Name</label>\r\n                        <Input\r\n                            id=\"lastName\"\r\n                            name=\"lastName\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.lastName}\r\n                        />\r\n                        {formik.touched.lastName && formik.errors.lastName ? (\r\n                            <div>{formik.errors.lastName}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <FormGroup>\r\n                        <label>Email</label>\r\n                        <Input\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.email}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ? (\r\n                            <div>{formik.errors.email}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Age</label>\r\n                        <Input\r\n                            id=\"age\"\r\n                            name=\"age\"\r\n                            type=\"number\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.age}\r\n                        />\r\n                        {formik.touched.age && formik.errors.age ? (\r\n                            <div>{formik.errors.age}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"6\">\r\n                    <FormGroup>\r\n                        <label>Mobile</label>\r\n                        <Input\r\n                            id=\"mobile\"\r\n                            name=\"mobile\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.mobile}\r\n                        />\r\n                        {formik.touched.mobile && formik.errors.mobile ? (\r\n                            <div>{formik.errors.mobile}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"4\">\r\n                    <FormGroup>\r\n                        <label>City</label>\r\n                        <Input\r\n                            id=\"city\"\r\n                            name=\"city\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.city}\r\n                        />\r\n                        {formik.touched.city && formik.errors.city ? (\r\n                            <div>{formik.errors.city}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                    <FormGroup>\r\n                        <label>State</label>\r\n                        <Input\r\n                            id=\"state\"\r\n                            name=\"state\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.state}\r\n                        />\r\n                        {formik.touched.state && formik.errors.state ? (\r\n                            <div>{formik.errors.state}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n                <Col md=\"4\">\r\n                    <FormGroup>\r\n                        <label>Country</label>\r\n                        <Input\r\n                            id=\"country\"\r\n                            name=\"country\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.country}\r\n                        />\r\n                        {formik.touched.country && formik.errors.country ? (\r\n                            <div>{formik.errors.country}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col md=\"12\">\r\n                    <FormGroup>\r\n                        <label>Account Id</label>\r\n                        <Input\r\n                            id=\"accid\"\r\n                            name=\"accid\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                            onBlur={formik.handleBlur}\r\n                            value={formik.values.accid}\r\n                        />\r\n                        {formik.touched.accid && formik.errors.accid ? (\r\n                            <div>{formik.errors.accid}</div>\r\n                        ) : null}\r\n                    </FormGroup>\r\n                </Col>\r\n            </Row>\r\n\r\n            <Button\r\n                className=\"btn-round float-right\"\r\n                color=\"primary\"\r\n                data-placement=\"right\"\r\n                id=\"tooltip341148792\"\r\n                type=\"submit\"\r\n            >\r\n                Add Patient\r\n            </Button>\r\n        </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"} isdoctor={\"false\"} ishome={\"false\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">Add Patient</h1>\r\n                                        <h5 className=\"text-on-back\">Pt</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddPatientForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\PatientInfo.js",["254","255","256"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n   FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\nimport axios from \"axios\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\r\n\r\nexport default function PatientInfo() {\r\n    const [Drinfo, setDrinfo] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n    const [details,setDetails] = useState({\r\n        firstName: '',\r\n        lastName: '',\r\n        email: '',\r\n        age: '',\r\n        city: '',\r\n        state: '',\r\n        country: '',\r\n        mobile: '',\r\n        accid: '',\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n        if(!Drinfo){\r\n            // getDrInfo();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            // const memeHash = await contract.methods.get().call()\r\n            // console.log(\"Value\",memeHash)\r\n\r\n            await contract.methods.getPatInfo().call().then(value =>{\r\n                console.log(value)\r\n                axios.get(baseURL+value).then((response) => {\r\n                    setDetails(response.data);\r\n                    console.log(details);\r\n                });\r\n\r\n            })\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                firstName: details.firstName,\r\n                lastName: details.lastName,\r\n                email: details.email,\r\n                age: details.age,\r\n                city: details.city,\r\n                state: details.state,\r\n                country: details.country,\r\n                mobile: details.mobile,\r\n                accid: details.accid,\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                firstName: Yup.string()\r\n                    .max(15, 'Must be 15 characters or less')\r\n                    .required('Required'),\r\n                lastName: Yup.string()\r\n                    .max(20, 'Must be 20 characters or less')\r\n                    .required('Required'),\r\n                email: Yup.string().email('Invalid email address').required('Required'),\r\n                age: Yup.number()\r\n                    .required('Required')\r\n                    .test(\r\n                        'Is 20+?',\r\n                        'Age must be greater than 20!',\r\n                        (value) => value >= 20\r\n                    ),\r\n                city: Yup.string()\r\n                    .required('Required'),\r\n                state: Yup.string()\r\n                    .required('Required'),\r\n                country: Yup.string()\r\n                    .required('Required'),\r\n                mobile: Yup.string().matches(phoneRegExp, 'Mobile number is not valid'),\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                await ipfs.add(result).then(\r\n                    hash => {\r\n                        console.log(hash.path)\r\n                        contract.methods.addDrInfo(values.accid,hash.path).send({from: account})\r\n                            .on(\"confirmation\", (r) => {\r\n                                console.log(\"Doctor Added Successfully\")\r\n                                Swal.fire({\r\n                                    icon: 'success',\r\n                                    title: 'Success',\r\n                                    text: 'Doctor Registered Successfully!',\r\n                                })\r\n                                window.location.reload();\r\n                            }).on(\"error\",(er)=>{\r\n                            Swal.fire({\r\n                                icon: 'error',\r\n                                title: 'Error',\r\n                                text: '1.Only Admin can Add Users\\n2.This id Already have a role',\r\n                            })\r\n                            window.location.reload();\r\n                        });\r\n                    });\r\n            },\r\n\r\n        });\r\n        return (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>First Name</label>\r\n                            <Input\r\n                                id=\"firstName\"\r\n                                name=\"firstName\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.firstName}\r\n                            />\r\n                            {formik.touched.firstName && formik.errors.firstName ? (\r\n                                <div>{formik.errors.firstName}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Last Name</label>\r\n                            <Input\r\n                                id=\"lastName\"\r\n                                name=\"lastName\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.lastName}\r\n                            />\r\n                            {formik.touched.lastName && formik.errors.lastName ? (\r\n                                <div>{formik.errors.lastName}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Email</label>\r\n                            <Input\r\n                                id=\"email\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.email}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email ? (\r\n                                <div>{formik.errors.email}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Age</label>\r\n                            <Input\r\n                                id=\"age\"\r\n                                name=\"age\"\r\n                                type=\"number\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.age}\r\n                            />\r\n                            {formik.touched.age && formik.errors.age ? (\r\n                                <div>{formik.errors.age}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"6\">\r\n                        <FormGroup>\r\n                            <label>Mobile</label>\r\n                            <Input\r\n                                id=\"mobile\"\r\n                                name=\"mobile\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.mobile}\r\n                            />\r\n                            {formik.touched.mobile && formik.errors.mobile ? (\r\n                                <div>{formik.errors.mobile}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>City</label>\r\n                            <Input\r\n                                id=\"city\"\r\n                                name=\"city\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.city}\r\n                            />\r\n                            {formik.touched.city && formik.errors.city ? (\r\n                                <div>{formik.errors.city}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>State</label>\r\n                            <Input\r\n                                id=\"state\"\r\n                                name=\"state\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.state}\r\n                            />\r\n                            {formik.touched.state && formik.errors.state ? (\r\n                                <div>{formik.errors.state}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                    <Col md=\"4\">\r\n                        <FormGroup>\r\n                            <label>Country</label>\r\n                            <Input\r\n                                id=\"country\"\r\n                                name=\"country\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.country}\r\n                            />\r\n                            {formik.touched.country && formik.errors.country ? (\r\n                                <div>{formik.errors.country}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Account Id</label>\r\n                            <Input\r\n                                id=\"accid\"\r\n                                name=\"accid\"\r\n                                type=\"text\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.accid}\r\n                            />\r\n                            {formik.touched.accid && formik.errors.accid ? (\r\n                                <div>{formik.errors.accid}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                {/*<Button*/}\r\n                {/*    className=\"btn-round float-right\"*/}\r\n                {/*    color=\"primary\"*/}\r\n                {/*    data-placement=\"right\"*/}\r\n                {/*    id=\"tooltip341148792\"*/}\r\n                {/*    type=\"submit\"*/}\r\n                {/*>*/}\r\n                {/*    Add Doctor*/}\r\n                {/*</Button>*/}\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">{details.firstName + ' ' +details.lastName}</h1>\r\n                                        <h5 className=\"text-on-back\">Pt</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n                            <Col md=\"6\" className=\"align-self-center\">\r\n\r\n                                    <Card className=\"card-coin card-plain\">\r\n                                        <CardHeader>\r\n                                            <img\r\n                                                alt=\"...\"\r\n                                                className=\"img-center img-fluid rounded-circle\"\r\n                                                src={require(\"../../../assets/img/mike.jpg\").default}\r\n                                            />\r\n                                            <h4 className=\"title\">{details.firstName + ' ' +details.lastName }</h4>\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            {/*<h6 className=\"profile-title text-left\"></h6>*/}\r\n                                            {/*<h6>{details.Speciality}</h6>*/}\r\n\r\n                                        </CardBody>\r\n                                    </Card>\r\n\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\SearchPatient.js",["257","258","259","260","261","262","263"],"\r\nimport React, {useState} from \"react\";\r\nimport PerfectScrollbar from \"perfect-scrollbar\";\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardHeader,\r\n    CardBody,\r\n    FormGroup,\r\n    Form,\r\n    Input,\r\n    Container,\r\n    Row,\r\n    Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport Footer from \"../../../components/Footer/Footer.js\";\r\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\r\nimport Web3 from \"web3\";\r\nimport Meme from \"../../../abis/Meme.json\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport ipfs from \"../../../utils/ipfs\";\r\n\r\n\r\nlet ps = null;\r\n\r\nexport default function SearchPatient() {\r\n    const [isAdmin, setIsAdmin] = useState('');\r\n    const [loadweb3s, setLoadweb3s] = useState('');\r\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\r\n    const [account, setAccount] = useState(null);\r\n    const [contract, setContract] = useState(null);\r\n\r\n    React.useEffect(() => {\r\n        if (navigator.platform.indexOf(\"Win\") > -1) {\r\n            document.documentElement.className += \" perfect-scrollbar-on\";\r\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\r\n            let tables = document.querySelectorAll(\".table-responsive\");\r\n            for (let i = 0; i < tables.length; i++) {\r\n                ps = new PerfectScrollbar(tables[i]);\r\n            }\r\n        }\r\n        document.body.classList.toggle(\"profile-page\");\r\n\r\n        if(!loadweb3s) {\r\n            loadWeb3();\r\n        }\r\n        if(!loadBlockchainDates) {\r\n            loadBlockchainDate();\r\n        }\r\n\r\n        return function cleanup() {\r\n\r\n            document.body.classList.toggle(\"profile-page\");\r\n        };\r\n    },[]);\r\n\r\n    const loadBlockchainDate = async () => {\r\n        const web3 = window.web3\r\n        const accounts = await web3.eth.getAccounts()\r\n        setAccount(accounts[0])\r\n        const networkId = await web3.eth.net.getId()\r\n        const networkData = Meme.networks[networkId]\r\n        if(networkData){\r\n            const abi = Meme.abi\r\n            const address = networkData.address\r\n            const contract = web3.eth.Contract(abi,address)\r\n            setContract(contract)\r\n            const adminId = await contract.methods.getAdmin().call()\r\n\r\n            if(adminId == accounts[0]){\r\n                setIsAdmin('false')\r\n            }else{\r\n                Swal.fire({\r\n                    icon: 'error',\r\n                    title: 'Oops...',\r\n                    text: 'Only Admin have access!',\r\n                }).then((value)=>{\r\n                    // history.push(\"/home\")\r\n                    window.location.href=\"/index\";\r\n                });\r\n            }\r\n        }else{\r\n            window.alert(\"Smart contract not deployed to the detected network\")\r\n        }\r\n        window.ethereum.on('accountsChanged', function (accounts) {\r\n            window.location.reload()\r\n        })\r\n        setLoadBlockchainDates('true');\r\n\r\n    };\r\n\r\n    const loadWeb3 = async () => {\r\n        if(window.ethereum){\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } if(window.web3){\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        }else{\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\r\n        }\r\n        setLoadweb3s('true');\r\n    };\r\n\r\n    const AddDoctorForm = () => {\r\n        const phoneRegExp = /^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/\r\n        const formik = useFormik({\r\n            initialValues: {\r\n                accid: '',\r\n            },\r\n\r\n            validationSchema: Yup.object({\r\n                accid: Yup.string()\r\n                    .max(42, 'Must be 20 characters')\r\n                    .min(42, 'Must be 20 characters')\r\n                    .required('Required'),\r\n            }),\r\n            onSubmit: async values => {\r\n                const result = JSON.stringify(values, null, 2);\r\n                await contract.methods.searchPat(values.accid).send({from : account})\r\n                    .on(\"confirmation\" ,(e)=>{\r\n                        window.location.href=\"/patient\"\r\n                    }).on(\"error\",(err)=>{\r\n                        Swal.fire({\r\n                            icon: 'error',\r\n                            title: 'Error',\r\n                            text: 'The particular id is not a Patient',\r\n                        })\r\n\r\n                    })\r\n\r\n            },\r\n\r\n        });\r\n        return (\r\n            <Form onSubmit={formik.handleSubmit}>\r\n\r\n                <Row>\r\n                    <Col md=\"12\">\r\n                        <FormGroup>\r\n                            <label>Account Id</label>\r\n                            <Input\r\n                                id=\"accid\"\r\n                                name=\"accid\"\r\n                                type=\"text\"\r\n                                placeholder=\"Search with Hash code\"\r\n                                onChange={formik.handleChange}\r\n                                onBlur={formik.handleBlur}\r\n                                value={formik.values.accid}\r\n                            />\r\n                            {formik.touched.accid && formik.errors.accid ? (\r\n                                <div>{formik.errors.accid}</div>\r\n                            ) : null}\r\n                        </FormGroup>\r\n                    </Col>\r\n                </Row>\r\n\r\n\r\n                <Button\r\n                    className=\"btn-round float-right\"\r\n                    color=\"primary\"\r\n                    data-placement=\"right\"\r\n                    id=\"tooltip341148792\"\r\n                    type=\"submit\"\r\n                >\r\n                    Search\r\n                </Button>\r\n            </Form>\r\n        );\r\n    }\r\n    return (\r\n        <>\r\n            <IndexNavbar  isadmin={\"true\"}/>\r\n            <div className=\"wrapper\">\r\n\r\n                <section className=\"section\">\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md=\"6\">\r\n                                <Card className=\"card-plain\">\r\n                                    <CardHeader>\r\n                                        <h1 className=\"profile-title text-left\">Doctor</h1>\r\n                                        <h5 className=\"text-on-back\">DR</h5>\r\n                                    </CardHeader>\r\n                                    <CardBody>\r\n                                        <AddDoctorForm />\r\n                                    </CardBody>\r\n                                </Card>\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Container>\r\n                </section>\r\n                <Footer />\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\variables\\charts.js",[],"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\components\\Navbars\\ExamplesNavbar.js",[],"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\components\\Footer\\Footer.js",["264","265"],"import React from \"react\";\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n  Button,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n  UncontrolledTooltip,\n} from \"reactstrap\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"footer\">\n      <Container>\n        <Row>\n          <Col md=\"3\">\n            <h1 className=\"title\">Helio</h1>\n          </Col>\n          <Col md=\"3\">\n            <Nav>\n              <NavItem>\n                <NavLink to=\"/\" tag={Link}>\n                  Home\n                </NavLink>\n              </NavItem>\n\n            </Nav>\n          </Col>\n          <Col md=\"3\">\n            <Nav>\n              <NavItem>\n                <NavLink href=\"#\">\n                  Contact Us\n                </NavLink>\n              </NavItem>\n\n            </Nav>\n          </Col>\n          <Col md=\"3\">\n            <Nav>\n              <NavItem>\n                <NavLink href=\"#\">\n                  Copyrights@2021\n                </NavLink>\n              </NavItem>\n\n            </Nav>\n          </Col>\n        </Row>\n      </Container>\n    </footer>\n  );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\components\\Navbars\\IndexNavbar.js",["266","267","268","269","270"],"\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n// reactstrap components\nimport {\n\n  Collapse,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  UncontrolledDropdown,\n  NavbarBrand,\n  Navbar,\n  NavItem,\n  NavLink,\n  Nav,\n  Container,\n  Row,\n  Col,\n\n} from \"reactstrap\";\n\nexport default function IndexNavbar({isadmin,isdoctor,ishome}) {\n  const [collapseOpen, setCollapseOpen] = React.useState(false);\n  const [isAdmin, setIsAdmin] = React.useState(false);\n  const [isDoctor, setIsDoctor] = React.useState(false);\n  const [isHome, setIsHome] = React.useState(false);\n  const [collapseOut, setCollapseOut] = React.useState(\"\");\n  const [color, setColor] = React.useState(\"navbar-transparent\");\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", changeColor);\n    if(!isAdmin){\n      if(isadmin == \"true\"){\n        setIsAdmin(true);\n      }\n      if(isdoctor == \"true\"){\n        setIsDoctor(true);\n      }\n      if(ishome == \"true\"){\n        setIsHome(true);\n      }\n    }\n    return function cleanup() {\n      window.removeEventListener(\"scroll\", changeColor);\n    };\n\n  },[]);\n  const changeColor = () => {\n    if (\n      document.documentElement.scrollTop > 99 ||\n      document.body.scrollTop > 99\n    ) {\n      setColor(\"bg-info\");\n    } else if (\n      document.documentElement.scrollTop < 100 ||\n      document.body.scrollTop < 100\n    ) {\n      setColor(\"navbar-transparent\");\n    }\n  };\n  const toggleCollapse = () => {\n    document.documentElement.classList.toggle(\"nav-open\");\n    setCollapseOpen(!collapseOpen);\n  };\n  const onCollapseExiting = () => {\n    setCollapseOut(\"collapsing-out\");\n  };\n  const onCollapseExited = () => {\n    setCollapseOut(\"\");\n  };\n  const scrollToDownload = () => {\n    document\n      .getElementById(\"download-section\")\n      .scrollIntoView({ behavior: \"smooth\" });\n  };\n  return (\n    <Navbar className={\"fixed-top \" + color} color-on-scroll=\"100\" expand=\"lg\">\n      <Container>\n        <div className=\"navbar-translate\">\n          <NavbarBrand to=\"/\" tag={Link} id=\"navbar-brand\">\n            <span>Helio</span>\n          </NavbarBrand>\n\n          <button\n            aria-expanded={collapseOpen}\n            className=\"navbar-toggler navbar-toggler\"\n            onClick={toggleCollapse}\n          >\n            <span className=\"navbar-toggler-bar bar1\" />\n            <span className=\"navbar-toggler-bar bar2\" />\n            <span className=\"navbar-toggler-bar bar3\" />\n          </button>\n        </div>\n        <Collapse\n          className={\"justify-content-end \" + collapseOut}\n          navbar\n          isOpen={collapseOpen}\n          onExiting={onCollapseExiting}\n          onExited={onCollapseExited}\n        >\n          <div className=\"navbar-collapse-header\">\n            <Row>\n              <Col className=\"collapse-brand\" xs=\"6\">\n                <a href=\"#pablo\" onClick={(e) => e.preventDefault()}>\n                  Helio\n                </a>\n              </Col>\n              <Col className=\"collapse-close text-right\" xs=\"6\">\n                <button\n                  aria-expanded={collapseOpen}\n                  className=\"navbar-toggler\"\n                  onClick={toggleCollapse}\n                >\n                  <i className=\"tim-icons icon-simple-remove\" />\n                </button>\n              </Col>\n            </Row>\n          </div>\n          <Nav navbar>\n\n\n            {/*<UncontrolledDropdown nav>*/}\n            {/*  <DropdownToggle*/}\n            {/*    caret*/}\n            {/*    color=\"default\"*/}\n            {/*    data-toggle=\"dropdown\"*/}\n            {/*    href=\"#pablo\"*/}\n            {/*    nav*/}\n            {/*    onClick={(e) => e.preventDefault()}*/}\n            {/*  >*/}\n            {/*    <i className=\"fa fa-cogs d-lg-none d-xl-none\" />*/}\n            {/*    Menus*/}\n            {/*  </DropdownToggle>*/}\n            {/*  <DropdownMenu className=\"dropdown-with-icons\">*/}\n\n            {/*    <DropdownItem tag={Link} to=\"/register-page\">*/}\n            {/*      <i className=\"tim-icons icon-bullet-list-67\" />*/}\n            {/*      Register Page*/}\n            {/*    </DropdownItem>*/}\n            {/*    <DropdownItem tag={Link} to=\"/landing-page\">*/}\n            {/*      <i className=\"tim-icons icon-image-02\" />*/}\n            {/*      Landing Page*/}\n            {/*    </DropdownItem>*/}\n            {/*    <DropdownItem tag={Link} to=\"/profile-page\">*/}\n            {/*      <i className=\"tim-icons icon-single-02\" />*/}\n            {/*      Profile Page*/}\n            {/*    </DropdownItem>*/}\n            {/*  </DropdownMenu>*/}\n            {/*</UncontrolledDropdown>*/}\n            {isAdmin ?\n                <UncontrolledDropdown nav>\n                  <DropdownToggle\n                      caret\n                      color=\"default\"\n                      data-toggle=\"dropdown\"\n                      href=\"#pablo\"\n                      nav\n                      onClick={(e) => e.preventDefault()}\n                  >\n                    <i className=\"fa fa-cogs d-lg-none d-xl-none\" />\n                    Admin\n                  </DropdownToggle>\n                  <DropdownMenu className=\"dropdown-with-icons\">\n\n                    <DropdownItem tag={Link} to=\"/add_doctor\">\n                      <i className=\"tim-icons icon-bullet-list-67\" />\n                      Add Doctor\n                    </DropdownItem>\n                    <DropdownItem tag={Link} to=\"/add_patient\">\n                      <i className=\"tim-icons icon-image-02\" />\n                      Add Patient\n                    </DropdownItem>\n                    <DropdownItem tag={Link} to=\"/search\">\n                      <i className=\"tim-icons icon-single-02\" />\n                      View Doctor\n                    </DropdownItem>\n                    {/*<DropdownItem tag={Link} to=\"/search_patient\">*/}\n                    {/*  <i className=\"tim-icons icon-single-02\" />*/}\n                    {/*  View Patient*/}\n                    {/*</DropdownItem>*/}\n                    <DropdownItem tag={Link} to=\"/remove\">\n                      <i className=\"tim-icons icon-single-02\" />\n                      Delete User\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n                : <>\n\n                </>}\n            {isDoctor ?\n                <>\n                  <UncontrolledDropdown nav>\n                    <DropdownToggle\n                        caret\n                        color=\"default\"\n                        data-toggle=\"dropdown\"\n                        href=\"#pablo\"\n                        nav\n                        onClick={(e) => e.preventDefault()}\n                    >\n                      <i className=\"fa fa-cogs d-lg-none d-xl-none\" />\n                      Doctor\n                    </DropdownToggle>\n                    <DropdownMenu className=\"dropdown-with-icons\">\n\n                      <DropdownItem tag={Link} to=\"/add_record\">\n                        <i className=\"tim-icons icon-bullet-list-67\" />\n                        Add Record\n                      </DropdownItem>\n\n                      <DropdownItem tag={Link} to=\"/view_record\">\n                        <i className=\"tim-icons icon-single-02\" />\n                        View record\n                      </DropdownItem>\n                      {/*<DropdownItem tag={Link} to=\"/search_patient\">*/}\n                      {/*  <i className=\"tim-icons icon-single-02\" />*/}\n                      {/*  View Patient*/}\n                      {/*</DropdownItem>*/}\n\n                    </DropdownMenu>\n                  </UncontrolledDropdown>\n                </>\n                :\n                <></>\n            }\n            {isHome ?\n                <>\n                  <NavItem className=\"p-0\">\n                    <NavLink\n                        data-placement=\"bottom\"\n                        tag={Link}\n                        rel=\"noopener noreferrer\"\n                        to=\"/Doctor_Profile\"\n                        title=\"Profile\"\n                    >\n                      I am Doctor\n                      <p className=\"d-lg-none d-xl-none\">Profile</p>\n                    </NavLink>\n                  </NavItem>\n                  <NavItem className=\"p-0\">\n                    <NavLink\n                        data-placement=\"bottom\"\n                        tag={Link}\n                        rel=\"noopener noreferrer\"\n                        to=\"/patient_profile\"\n                        title=\"Profile\"\n                    >\n                      I am Patient\n                      <p className=\"d-lg-none d-xl-none\">Profile</p>\n                    </NavLink>\n                  </NavItem>\n                </>\n                :\n                <></>\n            }\n            <NavItem className=\"p-0\">\n              <NavLink\n                  data-placement=\"bottom\"\n                  tag={Link}\n                  rel=\"noopener noreferrer\"\n                  to=\"/admin\"\n                  title=\"Profile\"\n              >\n                <i className=\"tim-icons icon-single-02\"/>\n                <p className=\"d-lg-none d-xl-none\">Profile</p>\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\utils\\histroy.js",[],"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\utils\\ipfs.js",[],"D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\Doctor\\Details.js",["271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288"],"\nimport React, {useState} from \"react\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    Label,\n    FormGroup,\n    Form,\n    Input,\n    FormText,\n    NavItem,\n    NavLink,\n    Nav,\n    Table,\n    TabContent,\n    TabPane,\n    Container,\n    Row,\n    Col,\n    UncontrolledTooltip,\n    UncontrolledCarousel,\n} from \"reactstrap\";\nimport classnames from \"classnames\";\nimport Footer from \"../../../components/Footer/Footer.js\";\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\nimport Web3 from \"web3\";\nimport Meme from \"../../../abis/Meme.json\";\nimport Swal from \"sweetalert2\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport ipfs from \"../../../utils/ipfs\";\nimport axios from \"axios\";\nimport {Link,useParams} from \"react-router-dom\";\n\n\nlet ps = null;\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\n\nexport default function Details() {\n\n    const params = useParams();\n\n\n    const [tabs, setTabs] = React.useState(1);\n    const [loadweb3s, setLoadweb3s] = useState('');\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\n    const [account, setAccount] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [Data, setData] = useState({\n        firstName: '',\n        lastName: '',\n        bp: '',\n        sugar: '',\n        weight: '',\n        fever: '',\n        notes: '',\n        testreport: '',\n        medicine: '',\n        des: '',\n    });\n\n    React.useEffect(() => {\n        if (navigator.platform.indexOf(\"Win\") > -1) {\n            document.documentElement.className += \" perfect-scrollbar-on\";\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n            let tables = document.querySelectorAll(\".table-responsive\");\n            for (let i = 0; i < tables.length; i++) {\n                ps = new PerfectScrollbar(tables[i]);\n            }\n        }\n        document.body.classList.toggle(\"profile-page\");\n\n        if(!loadweb3s) {\n            loadWeb3();\n        }\n        if(!loadBlockchainDates) {\n            loadBlockchainDate();\n        }\n\n        return function cleanup() {\n\n            document.body.classList.toggle(\"profile-page\");\n        };\n    },[]);\n\n    const loadBlockchainDate = async () => {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        setAccount(accounts[0])\n        const networkId = await web3.eth.net.getId()\n        const networkData = Meme.networks[networkId]\n        if(networkData){\n            const abi = Meme.abi\n            const address = networkData.address\n            const contract = web3.eth.Contract(abi,address)\n            setContract(contract)\n        }else{\n            window.alert(\"Smart contract not deployed to the detected network\")\n        }\n        window.ethereum.on('accountsChanged', function (accounts) {\n            window.location.reload()\n        })\n        setLoadBlockchainDates('true');\n        await axios.get(baseURL+params.hash).then((response) => {\n            const respon = response.data;\n            console.log('old_hash',respon)\n            setData(respon);\n\n        });\n    };\n\n    const loadWeb3 = async () => {\n        if(window.ethereum){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n        setLoadweb3s('true');\n    };\n\n\n    return (\n        <>\n            <IndexNavbar  isadmin={\"false\"} isdoctor={\"true\"} ishome={\"false\"}/>\n            <div className=\"wrapper\">\n                <div className=\"page-header\">\n                    <img\n                        alt=\"...\"\n                        className=\"dots\"\n                        src={require(\"../../../assets/img/dots.png\").default}\n                    />\n                    <img\n                        alt=\"...\"\n                        className=\"path\"\n                        src={require(\"../../../assets/img/path4.png\").default}\n                    />\n                    <Container className=\"align-items-center\">\n                        <Row>\n                            <Col lg=\"6\" md=\"6\">\n                                <h1 className=\"profile-title text-left\">{Data.firstName + \" \" + Data.lastName}</h1>\n                                <h5 className=\"text-on-back\" style={{fontSize:\"50px\"}}>{Data.des}</h5>\n                                <p className=\"profile-description\">\n                                    Here we can see patient record\n                                </p>\n                            </Col>\n                            <Col className=\"ml-auto mr-auto\" lg=\"6\" md=\"6\">\n                                <Card className=\"card-coin card-plain\">\n                                    <CardHeader>\n                                        <img\n                                            alt=\"...\"\n                                            className=\"img-center img-fluid rounded-circle\"\n                                            src={require(\"../../../assets/img/profile.png\").default}\n                                        />\n                                        <h4 className=\"title\">Details</h4>\n                                    </CardHeader>\n                                    <CardBody>\n                                        <Nav\n                                            className=\"nav-tabs-primary justify-content-center\"\n                                            tabs\n                                        >\n                                            <NavItem>\n                                                <NavLink\n                                                    className={classnames({\n                                                        active: tabs === 1,\n                                                    })}\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        setTabs(1);\n                                                    }}\n                                                    href=\"#pablo\"\n                                                >\n                                                    General & notes\n                                                </NavLink>\n                                            </NavItem>\n                                            <NavItem>\n                                                <NavLink\n                                                    className={classnames({\n                                                        active: tabs === 2,\n                                                    })}\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        setTabs(2);\n                                                    }}\n                                                    href=\"#pablo\"\n                                                >\n                                                    Test Report\n                                                </NavLink>\n                                            </NavItem>\n                                            <NavItem>\n                                                <NavLink\n                                                    className={classnames({\n                                                        active: tabs === 3,\n                                                    })}\n                                                    onClick={(e) => {\n                                                        e.preventDefault();\n                                                        setTabs(3);\n                                                    }}\n                                                    href=\"#pablo\"\n                                                >\n                                                    Medicine\n                                                </NavLink>\n                                            </NavItem>\n                                        </Nav>\n                                        <TabContent\n                                            className=\"tab-subcategories\"\n                                            activeTab={\"tab\" + tabs}\n                                        >\n                                            <TabPane tabId=\"tab1\">\n                                                <h5 className=\"title\">Blood Pressure: {Data.bp}</h5>\n                                                <h5 className=\"title\">Sugar level: {Data.sugar}</h5>\n                                                <h5 className=\"title\">Temperature: {Data.fever}</h5>\n                                                <h5 className=\"title\">Weight: {Data.weight}</h5>\n                                                <blockquote className=\"blockquote\">\n                                                    <p className=\"mb-0\">{Data.notes}</p>\n                                                </blockquote>\n                                            </TabPane>\n                                            <TabPane tabId=\"tab2\">\n                                                <blockquote className=\"blockquote\">\n                                                    <p className=\"mb-0\">{Data.testreport}</p>\n                                                </blockquote>\n                                            </TabPane>\n                                            <TabPane tabId=\"tab3\">\n                                                <blockquote className=\"blockquote\">\n                                                    <p className=\"mb-0\">{Data.medicine}</p>\n                                                </blockquote>\n                                            </TabPane>\n                                        </TabContent>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                    </Container>\n                </div>\n                <Footer />\n            </div>\n        </>\n    );\n}\n","D:\\xampp\\htdocs\\DAPP\\starter_kit-master\\src\\views\\examples\\patient\\PatientProfile.js",["289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305"],"\nimport React, {useState} from \"react\";\nimport PerfectScrollbar from \"perfect-scrollbar\";\nimport {\n    Button,\n    Card,\n    CardHeader,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Container,\n    Row,\n    Col,\n    Table, DropdownItem,\n\n} from \"reactstrap\";\n\nimport Footer from \"../../../components/Footer/Footer.js\";\nimport IndexNavbar from \"../../../components/Navbars/IndexNavbar\";\nimport Web3 from \"web3\";\nimport Meme from \"../../../abis/Meme.json\";\nimport Swal from \"sweetalert2\";\nimport { useFormik } from \"formik\";\nimport * as Yup from 'yup';\nimport ipfs from \"../../../utils/ipfs\";\nimport axios from \"axios\";\nimport QRCode from 'qrcode.react';\nimport {Link} from \"react-router-dom\";\n\n\nlet ps = null;\nconst baseURL = \"https://ipfs.infura.io:5001/api/v0/cat?arg=\";\n\nexport default function PatientProfile() {\n\n    const [loadweb3s, setLoadweb3s] = useState('');\n    const [loadBlockchainDates, setLoadBlockchainDates] = useState('');\n    const [account, setAccount] = useState('0x00000000000000000000000000000000000');\n    const [contract, setContract] = useState(null);\n    const [patID, setpatID] = useState('');\n    const [isDoctor, setIsDoctor] = useState(false);\n    const [isPatient, setIsPatient] = useState(false);\n    const [details,setDetails] = useState({\n        firstName: '',\n        lastName: '',\n        email: '',\n        age: '',\n        city: '',\n        state: '',\n        country: '',\n        mobile: '',\n        accid: '',\n    });\n    const [Data,setData] = useState([]);\n    console.log(Data);\n\n    React.useEffect(() => {\n        if (navigator.platform.indexOf(\"Win\") > -1) {\n            document.documentElement.className += \" perfect-scrollbar-on\";\n            document.documentElement.classList.remove(\"perfect-scrollbar-off\");\n            let tables = document.querySelectorAll(\".table-responsive\");\n            for (let i = 0; i < tables.length; i++) {\n                ps = new PerfectScrollbar(tables[i]);\n            }\n        }\n        document.body.classList.toggle(\"profile-page\");\n\n        if(!loadweb3s) {\n            loadWeb3();\n        }\n        if(!loadBlockchainDates) {\n            loadBlockchainDate();\n        }\n\n        return function cleanup() {\n\n            document.body.classList.toggle(\"profile-page\");\n        };\n    },[]);\n\n    const loadBlockchainDate = async () => {\n        const web3 = window.web3\n        const accounts = await web3.eth.getAccounts()\n        setAccount(accounts[0])\n        const networkId = await web3.eth.net.getId()\n        const networkData = Meme.networks[networkId]\n        if(networkData){\n            const abi = Meme.abi\n            const address = networkData.address\n            const contract = web3.eth.Contract(abi,address)\n            setContract(contract)\n            try {\n                const  result = await contract.methods.isPat(accounts[0]).call()\n                console.log(result)\n                if(result=== \"1\"){\n                    setIsPatient(true)\n                }\n                else{\n                    Swal.fire({\n                        icon: 'error',\n                        title: 'Oops...',\n                        text: 'Only Patient have access!',\n                    }).then((value)=>{\n                        window.location.href=\"/index\";\n                    });\n                }\n            } catch (error) {\n                Swal.fire({\n                    icon: 'error',\n                    title: 'Oops...',\n                    text: 'Only Patient have access!',\n                }).then((value)=>{\n                    window.location.href=\"/index\";\n                });\n            }\n            await contract.methods.getPatInfo(accounts[0]).call().then(value =>{\n                axios.get(baseURL+value).then((response) => {\n                    setDetails(response.data);\n                    setIsPatient(true);\n                });\n            })\n            await contract.methods.viewMedRec(accounts[0]).call().then( Hash =>{\n                console.log(Hash)\n                axios.get(baseURL+Hash).then((response) => {\n                    const respon = response.data;\n                    setData(respon);\n\n                });\n\n            })\n        }else{\n            window.alert(\"Smart contract not deployed to the detected network\")\n        }\n        window.ethereum.on('accountsChanged', function (accounts) {\n            window.location.reload()\n        })\n        setLoadBlockchainDates('true');\n\n    };\n\n    const loadWeb3 = async () => {\n        if(window.ethereum){\n            window.web3 = new Web3(window.ethereum)\n            await window.ethereum.enable()\n        } if(window.web3){\n            window.web3 = new Web3(window.web3.currentProvider)\n        }else{\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n        }\n        setLoadweb3s('true');\n    };\n\n    const downloadQR = () => {\n        const canvas = document.getElementById(account);\n        const pngUrl = canvas\n            .toDataURL(\"image/png\")\n            .replace(\"image/png\", \"image/octet-stream\");\n        let downloadLink = document.createElement(\"a\");\n        downloadLink.href = pngUrl;\n        downloadLink.download = account + \".png\";\n        document.body.appendChild(downloadLink);\n        downloadLink.click();\n        document.body.removeChild(downloadLink);\n    };\n\n\n    return (\n        <>\n            <IndexNavbar  isadmin={\"false\"} isdoctor={\"false\"} ishome={\"false\"}/>\n            <div className=\"wrapper\">\n                <div className=\"page-header\">\n                    <img\n                        alt=\"...\"\n                        className=\"dots\"\n                        src={require(\"../../../assets/img/dots.png\").default}\n                    />\n                    <img\n                        alt=\"...\"\n                        className=\"path\"\n                        src={require(\"../../../assets/img/path4.png\").default}\n                    />\n                <Container>\n                    <Row>\n                        <Col lg=\"6\" md=\"6\">\n                            <h1 className=\"profile-title text-left\" style={{lineBreak:\"anywhere\"}}>{details.firstName + ' ' +details.lastName }</h1>\n                        </Col>\n                        <Col className=\"ml-auto mr-auto\" lg=\"6\" md=\"6\">\n                            <Card className=\"card-coin card-plain\">\n                                <CardHeader>\n                                    <img\n                                        alt=\"...\"\n                                        className=\"img-center img-fluid rounded-circle\"\n                                        src={require(\"../../../assets/img/profile.png\").default}\n                                    />\n                                    <h4 className=\"title\">Profile</h4>\n                                    <p className=\"text-center\">{details.email}</p>\n                                    <p className=\"text-center\">Age: {details.age}</p>\n                                    <p className=\"text-center\">{details.mobile}</p>\n                                    <p className=\"text-center\">{details.city +', '+ details.state + ', '+ details.country }</p>\n                                    <blockquote className=\"blockquote\">\n                                        <div>\n                                            <QRCode\n                                                id={account}\n                                                value={account}\n                                                size={290}\n                                                level={\"H\"}\n                                                includeMargin={true}\n                                            />\n                                            <a onClick={downloadQR} style={{display:\"block\",textAlign:\"center\",cursor:\"pointer\"}}> Download QR </a>\n                                        </div>\n                                    </blockquote>\n                                </CardHeader>\n                                <CardBody>\n\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                </Container>\n                </div>\n                    <section className=\"section\">\n                        <Container>\n                            <Row>\n                                <Col md=\"12\">\n                                    <Card className=\"card-plain\">\n                                        <CardHeader>\n                                            <h5 className=\"text-on-back\" style={{fontSize:\"3em\"}}>Records</h5>\n                                        </CardHeader>\n                                        <CardBody>\n                                            <Table>\n                                                <thead>\n                                                <tr>\n                                                    <th className=\"text-center\">#</th>\n                                                    <th>Doctor Address</th>\n                                                    <th>Patient Address</th>\n                                                    <th className=\"text-center\">Description</th>\n                                                    <th className=\"text-right\">Actions</th>\n                                                </tr>\n                                                </thead>\n                                                <tbody>\n                                                {Data.map((records,i) => {\n                                                    console.log(i,records[0]);\n                                                    return(\n                                                        <tr>\n                                                            <td className=\"text-center\">{parseInt(i+1)}</td>\n                                                            <td>{records[0].dr_id}</td>\n                                                            <td>{records[0].pat_id}</td>\n                                                            <td className=\"text-center\">{records[0].des}</td>\n\n                                                            <td className=\"text-right\">\n                                                                <Button className=\"btn-simple\" onClick={ () => window.location.href=\"/details/\"+records[0].c_Hash} color=\"info\">\n                                                                    View\n                                                                </Button>{` `}\n\n                                                            </td>\n                                                        </tr>\n                                                    );\n                                                })}\n\n                                                </tbody>\n                                            </Table>\n                                        </CardBody>\n                                    </Card>\n                                </Col>\n\n                            </Row>\n                        </Container>\n                    </section>\n\n                <Footer />\n            </div>\n        </>\n    );\n}\n",{"ruleId":"306","severity":1,"message":"307","line":21,"column":8,"nodeType":"308","messageId":"309","endLine":21,"endColumn":19},{"ruleId":"310","replacedBy":"311"},{"ruleId":"312","replacedBy":"313"},{"ruleId":"306","severity":1,"message":"314","line":4,"column":10,"nodeType":"308","messageId":"309","endLine":4,"endColumn":14},{"ruleId":"306","severity":1,"message":"315","line":7,"column":3,"nodeType":"308","messageId":"309","endLine":7,"endColumn":9},{"ruleId":"306","severity":1,"message":"316","line":8,"column":3,"nodeType":"308","messageId":"309","endLine":8,"endColumn":7},{"ruleId":"306","severity":1,"message":"317","line":9,"column":3,"nodeType":"308","messageId":"309","endLine":9,"endColumn":13},{"ruleId":"306","severity":1,"message":"318","line":10,"column":3,"nodeType":"308","messageId":"309","endLine":10,"endColumn":11},{"ruleId":"306","severity":1,"message":"319","line":11,"column":3,"nodeType":"308","messageId":"309","endLine":11,"endColumn":13},{"ruleId":"306","severity":1,"message":"320","line":12,"column":3,"nodeType":"308","messageId":"309","endLine":12,"endColumn":12},{"ruleId":"306","severity":1,"message":"321","line":13,"column":3,"nodeType":"308","messageId":"309","endLine":13,"endColumn":16},{"ruleId":"306","severity":1,"message":"322","line":14,"column":3,"nodeType":"308","messageId":"309","endLine":14,"endColumn":12},{"ruleId":"306","severity":1,"message":"323","line":15,"column":3,"nodeType":"308","messageId":"309","endLine":15,"endColumn":12},{"ruleId":"306","severity":1,"message":"324","line":21,"column":8,"nodeType":"308","messageId":"309","endLine":21,"endColumn":22},{"ruleId":"306","severity":1,"message":"325","line":24,"column":8,"nodeType":"308","messageId":"309","endLine":24,"endColumn":20},{"ruleId":"306","severity":1,"message":"314","line":3,"column":10,"nodeType":"308","messageId":"309","endLine":3,"endColumn":14},{"ruleId":"306","severity":1,"message":"315","line":5,"column":3,"nodeType":"308","messageId":"309","endLine":5,"endColumn":9},{"ruleId":"306","severity":1,"message":"316","line":6,"column":3,"nodeType":"308","messageId":"309","endLine":6,"endColumn":7},{"ruleId":"306","severity":1,"message":"317","line":7,"column":3,"nodeType":"308","messageId":"309","endLine":7,"endColumn":13},{"ruleId":"306","severity":1,"message":"318","line":8,"column":3,"nodeType":"308","messageId":"309","endLine":8,"endColumn":11},{"ruleId":"306","severity":1,"message":"319","line":9,"column":3,"nodeType":"308","messageId":"309","endLine":9,"endColumn":13},{"ruleId":"306","severity":1,"message":"320","line":10,"column":3,"nodeType":"308","messageId":"309","endLine":10,"endColumn":12},{"ruleId":"306","severity":1,"message":"321","line":11,"column":3,"nodeType":"308","messageId":"309","endLine":11,"endColumn":16},{"ruleId":"306","severity":1,"message":"322","line":12,"column":3,"nodeType":"308","messageId":"309","endLine":12,"endColumn":12},{"ruleId":"306","severity":1,"message":"323","line":13,"column":3,"nodeType":"308","messageId":"309","endLine":13,"endColumn":12},{"ruleId":"306","severity":1,"message":"325","line":18,"column":8,"nodeType":"308","messageId":"309","endLine":18,"endColumn":20},{"ruleId":"306","severity":1,"message":"326","line":22,"column":8,"nodeType":"308","messageId":"309","endLine":22,"endColumn":12},{"ruleId":"306","severity":1,"message":"327","line":25,"column":21,"nodeType":"308","messageId":"309","endLine":25,"endColumn":33},{"ruleId":"306","severity":1,"message":"328","line":27,"column":10,"nodeType":"308","messageId":"309","endLine":27,"endColumn":17},{"ruleId":"306","severity":1,"message":"329","line":28,"column":10,"nodeType":"308","messageId":"309","endLine":28,"endColumn":18},{"ruleId":"330","severity":1,"message":"331","line":37,"column":5,"nodeType":"332","messageId":"333","endLine":42,"endColumn":6},{"ruleId":"334","severity":1,"message":"335","line":43,"column":5,"nodeType":"336","endLine":43,"endColumn":7,"suggestions":"337"},{"ruleId":"306","severity":1,"message":"338","line":18,"column":8,"nodeType":"308","messageId":"309","endLine":18,"endColumn":13},{"ruleId":"306","severity":1,"message":"326","line":27,"column":8,"nodeType":"308","messageId":"309","endLine":27,"endColumn":12},{"ruleId":"306","severity":1,"message":"339","line":29,"column":5,"nodeType":"308","messageId":"309","endLine":29,"endColumn":7},{"ruleId":"306","severity":1,"message":"340","line":30,"column":7,"nodeType":"308","messageId":"309","endLine":30,"endColumn":14},{"ruleId":"306","severity":1,"message":"341","line":33,"column":12,"nodeType":"308","messageId":"309","endLine":33,"endColumn":19},{"ruleId":"306","severity":1,"message":"342","line":34,"column":20,"nodeType":"308","messageId":"309","endLine":34,"endColumn":29},{"ruleId":"334","severity":1,"message":"343","line":65,"column":7,"nodeType":"336","endLine":65,"endColumn":9,"suggestions":"344"},{"ruleId":"345","severity":1,"message":"346","line":80,"column":24,"nodeType":"347","messageId":"348","endLine":80,"endColumn":26},{"ruleId":"306","severity":1,"message":"349","line":117,"column":15,"nodeType":"308","messageId":"309","endLine":117,"endColumn":26},{"ruleId":"306","severity":1,"message":"350","line":136,"column":23,"nodeType":"308","messageId":"309","endLine":136,"endColumn":29},{"ruleId":"306","severity":1,"message":"324","line":26,"column":8,"nodeType":"308","messageId":"309","endLine":26,"endColumn":22},{"ruleId":"306","severity":1,"message":"315","line":5,"column":5,"nodeType":"308","messageId":"309","endLine":5,"endColumn":11},{"ruleId":"306","severity":1,"message":"351","line":9,"column":5,"nodeType":"308","messageId":"309","endLine":9,"endColumn":14},{"ruleId":"306","severity":1,"message":"352","line":10,"column":5,"nodeType":"308","messageId":"309","endLine":10,"endColumn":9},{"ruleId":"306","severity":1,"message":"353","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":10},{"ruleId":"306","severity":1,"message":"354","line":15,"column":5,"nodeType":"308","messageId":"309","endLine":15,"endColumn":24},{"ruleId":"306","severity":1,"message":"320","line":16,"column":5,"nodeType":"308","messageId":"309","endLine":16,"endColumn":14},{"ruleId":"306","severity":1,"message":"326","line":23,"column":8,"nodeType":"308","messageId":"309","endLine":23,"endColumn":12},{"ruleId":"306","severity":1,"message":"355","line":24,"column":8,"nodeType":"308","messageId":"309","endLine":24,"endColumn":12},{"ruleId":"306","severity":1,"message":"356","line":25,"column":8,"nodeType":"308","messageId":"309","endLine":25,"endColumn":15},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"341","line":31,"column":12,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"306","severity":1,"message":"329","line":35,"column":12,"nodeType":"308","messageId":"309","endLine":35,"endColumn":20},{"ruleId":"334","severity":1,"message":"335","line":59,"column":7,"nodeType":"336","endLine":59,"endColumn":9,"suggestions":"357"},{"ruleId":"345","severity":1,"message":"346","line":74,"column":24,"nodeType":"347","messageId":"348","endLine":74,"endColumn":26},{"ruleId":"306","severity":1,"message":"315","line":5,"column":3,"nodeType":"308","messageId":"309","endLine":5,"endColumn":9},{"ruleId":"306","severity":1,"message":"358","line":9,"column":3,"nodeType":"308","messageId":"309","endLine":9,"endColumn":8},{"ruleId":"306","severity":1,"message":"351","line":10,"column":3,"nodeType":"308","messageId":"309","endLine":10,"endColumn":12},{"ruleId":"306","severity":1,"message":"352","line":11,"column":3,"nodeType":"308","messageId":"309","endLine":11,"endColumn":7},{"ruleId":"306","severity":1,"message":"353","line":12,"column":3,"nodeType":"308","messageId":"309","endLine":12,"endColumn":8},{"ruleId":"306","severity":1,"message":"359","line":13,"column":3,"nodeType":"308","messageId":"309","endLine":13,"endColumn":11},{"ruleId":"306","severity":1,"message":"360","line":14,"column":3,"nodeType":"308","messageId":"309","endLine":14,"endColumn":10},{"ruleId":"306","severity":1,"message":"361","line":15,"column":3,"nodeType":"308","messageId":"309","endLine":15,"endColumn":10},{"ruleId":"306","severity":1,"message":"362","line":16,"column":3,"nodeType":"308","messageId":"309","endLine":16,"endColumn":6},{"ruleId":"306","severity":1,"message":"363","line":17,"column":3,"nodeType":"308","messageId":"309","endLine":17,"endColumn":8},{"ruleId":"306","severity":1,"message":"364","line":18,"column":3,"nodeType":"308","messageId":"309","endLine":18,"endColumn":13},{"ruleId":"306","severity":1,"message":"365","line":19,"column":3,"nodeType":"308","messageId":"309","endLine":19,"endColumn":10},{"ruleId":"306","severity":1,"message":"354","line":23,"column":3,"nodeType":"308","messageId":"309","endLine":23,"endColumn":22},{"ruleId":"306","severity":1,"message":"366","line":24,"column":3,"nodeType":"308","messageId":"309","endLine":24,"endColumn":23},{"ruleId":"306","severity":1,"message":"367","line":33,"column":7,"nodeType":"308","messageId":"309","endLine":33,"endColumn":20},{"ruleId":"306","severity":1,"message":"368","line":54,"column":10,"nodeType":"308","messageId":"309","endLine":54,"endColumn":14},{"ruleId":"306","severity":1,"message":"369","line":54,"column":16,"nodeType":"308","messageId":"309","endLine":54,"endColumn":23},{"ruleId":"306","severity":1,"message":"327","line":55,"column":21,"nodeType":"308","messageId":"309","endLine":55,"endColumn":33},{"ruleId":"306","severity":1,"message":"370","line":56,"column":31,"nodeType":"308","messageId":"309","endLine":56,"endColumn":53},{"ruleId":"334","severity":1,"message":"335","line":89,"column":5,"nodeType":"336","endLine":89,"endColumn":7,"suggestions":"371"},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"341","line":31,"column":12,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":59,"column":7,"nodeType":"336","endLine":59,"endColumn":9,"suggestions":"372"},{"ruleId":"345","severity":1,"message":"346","line":74,"column":24,"nodeType":"347","messageId":"348","endLine":74,"endColumn":26},{"ruleId":"306","severity":1,"message":"315","line":5,"column":5,"nodeType":"308","messageId":"309","endLine":5,"endColumn":11},{"ruleId":"306","severity":1,"message":"351","line":9,"column":5,"nodeType":"308","messageId":"309","endLine":9,"endColumn":14},{"ruleId":"306","severity":1,"message":"352","line":10,"column":5,"nodeType":"308","messageId":"309","endLine":10,"endColumn":9},{"ruleId":"306","severity":1,"message":"353","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":10},{"ruleId":"306","severity":1,"message":"354","line":15,"column":5,"nodeType":"308","messageId":"309","endLine":15,"endColumn":24},{"ruleId":"306","severity":1,"message":"320","line":16,"column":5,"nodeType":"308","messageId":"309","endLine":16,"endColumn":14},{"ruleId":"306","severity":1,"message":"356","line":24,"column":8,"nodeType":"308","messageId":"309","endLine":24,"endColumn":15},{"ruleId":"306","severity":1,"message":"373","line":26,"column":9,"nodeType":"308","messageId":"309","endLine":26,"endColumn":13},{"ruleId":"306","severity":1,"message":"339","line":29,"column":5,"nodeType":"308","messageId":"309","endLine":29,"endColumn":7},{"ruleId":"306","severity":1,"message":"374","line":33,"column":12,"nodeType":"308","messageId":"309","endLine":33,"endColumn":20},{"ruleId":"306","severity":1,"message":"329","line":37,"column":12,"nodeType":"308","messageId":"309","endLine":37,"endColumn":20},{"ruleId":"334","severity":1,"message":"335","line":75,"column":7,"nodeType":"336","endLine":75,"endColumn":9,"suggestions":"375"},{"ruleId":"376","severity":1,"message":"377","line":199,"column":49,"nodeType":"378","endLine":199,"endColumn":135},{"ruleId":"306","severity":1,"message":"339","line":29,"column":5,"nodeType":"308","messageId":"309","endLine":29,"endColumn":7},{"ruleId":"306","severity":1,"message":"342","line":33,"column":20,"nodeType":"308","messageId":"309","endLine":33,"endColumn":29},{"ruleId":"334","severity":1,"message":"343","line":78,"column":7,"nodeType":"336","endLine":78,"endColumn":9,"suggestions":"379"},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"342","line":32,"column":20,"nodeType":"308","messageId":"309","endLine":32,"endColumn":29},{"ruleId":"334","severity":1,"message":"380","line":77,"column":7,"nodeType":"336","endLine":77,"endColumn":9,"suggestions":"381"},{"ruleId":"306","severity":1,"message":"326","line":25,"column":8,"nodeType":"308","messageId":"309","endLine":25,"endColumn":12},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"341","line":31,"column":12,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":59,"column":7,"nodeType":"336","endLine":59,"endColumn":9,"suggestions":"382"},{"ruleId":"345","severity":1,"message":"346","line":74,"column":24,"nodeType":"347","messageId":"348","endLine":74,"endColumn":26},{"ruleId":"306","severity":1,"message":"349","line":109,"column":15,"nodeType":"308","messageId":"309","endLine":109,"endColumn":26},{"ruleId":"306","severity":1,"message":"350","line":122,"column":23,"nodeType":"308","messageId":"309","endLine":122,"endColumn":29},{"ruleId":"306","severity":1,"message":"383","line":15,"column":12,"nodeType":"308","messageId":"309","endLine":15,"endColumn":24},{"ruleId":"306","severity":1,"message":"326","line":26,"column":8,"nodeType":"308","messageId":"309","endLine":26,"endColumn":12},{"ruleId":"306","severity":1,"message":"373","line":28,"column":9,"nodeType":"308","messageId":"309","endLine":28,"endColumn":13},{"ruleId":"306","severity":1,"message":"339","line":31,"column":5,"nodeType":"308","messageId":"309","endLine":31,"endColumn":7},{"ruleId":"306","severity":1,"message":"328","line":38,"column":12,"nodeType":"308","messageId":"309","endLine":38,"endColumn":19},{"ruleId":"306","severity":1,"message":"384","line":40,"column":12,"nodeType":"308","messageId":"309","endLine":40,"endColumn":17},{"ruleId":"306","severity":1,"message":"385","line":43,"column":12,"nodeType":"308","messageId":"309","endLine":43,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":69,"column":7,"nodeType":"336","endLine":69,"endColumn":9,"suggestions":"386"},{"ruleId":"306","severity":1,"message":"349","line":129,"column":15,"nodeType":"308","messageId":"309","endLine":129,"endColumn":26},{"ruleId":"306","severity":1,"message":"350","line":142,"column":23,"nodeType":"308","messageId":"309","endLine":142,"endColumn":29},{"ruleId":"387","severity":1,"message":"388","line":152,"column":21,"nodeType":"389","messageId":"390","endLine":160,"endColumn":22},{"ruleId":"306","severity":1,"message":"391","line":214,"column":11,"nodeType":"308","messageId":"309","endLine":214,"endColumn":22},{"ruleId":"306","severity":1,"message":"392","line":2,"column":25,"nodeType":"308","messageId":"309","endLine":2,"endColumn":34},{"ruleId":"306","severity":1,"message":"339","line":29,"column":5,"nodeType":"308","messageId":"309","endLine":29,"endColumn":7},{"ruleId":"306","severity":1,"message":"384","line":38,"column":12,"nodeType":"308","messageId":"309","endLine":38,"endColumn":17},{"ruleId":"334","severity":1,"message":"335","line":78,"column":7,"nodeType":"336","endLine":78,"endColumn":9,"suggestions":"393"},{"ruleId":"306","severity":1,"message":"349","line":138,"column":15,"nodeType":"308","messageId":"309","endLine":138,"endColumn":26},{"ruleId":"306","severity":1,"message":"350","line":151,"column":23,"nodeType":"308","messageId":"309","endLine":151,"endColumn":29},{"ruleId":"387","severity":1,"message":"388","line":161,"column":21,"nodeType":"389","messageId":"390","endLine":169,"endColumn":22},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"341","line":31,"column":12,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":59,"column":7,"nodeType":"336","endLine":59,"endColumn":9,"suggestions":"394"},{"ruleId":"345","severity":1,"message":"346","line":74,"column":24,"nodeType":"347","messageId":"348","endLine":74,"endColumn":26},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"342","line":32,"column":20,"nodeType":"308","messageId":"309","endLine":32,"endColumn":29},{"ruleId":"334","severity":1,"message":"380","line":74,"column":7,"nodeType":"336","endLine":74,"endColumn":9,"suggestions":"395"},{"ruleId":"306","severity":1,"message":"326","line":25,"column":8,"nodeType":"308","messageId":"309","endLine":25,"endColumn":12},{"ruleId":"306","severity":1,"message":"339","line":28,"column":5,"nodeType":"308","messageId":"309","endLine":28,"endColumn":7},{"ruleId":"306","severity":1,"message":"341","line":31,"column":12,"nodeType":"308","messageId":"309","endLine":31,"endColumn":19},{"ruleId":"334","severity":1,"message":"335","line":59,"column":7,"nodeType":"336","endLine":59,"endColumn":9,"suggestions":"396"},{"ruleId":"345","severity":1,"message":"346","line":74,"column":24,"nodeType":"347","messageId":"348","endLine":74,"endColumn":26},{"ruleId":"306","severity":1,"message":"349","line":109,"column":15,"nodeType":"308","messageId":"309","endLine":109,"endColumn":26},{"ruleId":"306","severity":1,"message":"350","line":122,"column":23,"nodeType":"308","messageId":"309","endLine":122,"endColumn":29},{"ruleId":"306","severity":1,"message":"315","line":5,"column":3,"nodeType":"308","messageId":"309","endLine":5,"endColumn":9},{"ruleId":"306","severity":1,"message":"354","line":12,"column":3,"nodeType":"308","messageId":"309","endLine":12,"endColumn":22},{"ruleId":"345","severity":1,"message":"346","line":33,"column":18,"nodeType":"347","messageId":"348","endLine":33,"endColumn":20},{"ruleId":"345","severity":1,"message":"346","line":36,"column":19,"nodeType":"347","messageId":"348","endLine":36,"endColumn":21},{"ruleId":"345","severity":1,"message":"346","line":39,"column":17,"nodeType":"347","messageId":"348","endLine":39,"endColumn":19},{"ruleId":"334","severity":1,"message":"397","line":47,"column":5,"nodeType":"336","endLine":47,"endColumn":7,"suggestions":"398"},{"ruleId":"306","severity":1,"message":"399","line":71,"column":9,"nodeType":"308","messageId":"309","endLine":71,"endColumn":25},{"ruleId":"306","severity":1,"message":"315","line":5,"column":5,"nodeType":"308","messageId":"309","endLine":5,"endColumn":11},{"ruleId":"306","severity":1,"message":"358","line":9,"column":5,"nodeType":"308","messageId":"309","endLine":9,"endColumn":10},{"ruleId":"306","severity":1,"message":"351","line":10,"column":5,"nodeType":"308","messageId":"309","endLine":10,"endColumn":14},{"ruleId":"306","severity":1,"message":"352","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":9},{"ruleId":"306","severity":1,"message":"353","line":12,"column":5,"nodeType":"308","messageId":"309","endLine":12,"endColumn":10},{"ruleId":"306","severity":1,"message":"359","line":13,"column":5,"nodeType":"308","messageId":"309","endLine":13,"endColumn":13},{"ruleId":"306","severity":1,"message":"363","line":17,"column":5,"nodeType":"308","messageId":"309","endLine":17,"endColumn":10},{"ruleId":"306","severity":1,"message":"354","line":23,"column":5,"nodeType":"308","messageId":"309","endLine":23,"endColumn":24},{"ruleId":"306","severity":1,"message":"366","line":24,"column":5,"nodeType":"308","messageId":"309","endLine":24,"endColumn":25},{"ruleId":"306","severity":1,"message":"355","line":31,"column":8,"nodeType":"308","messageId":"309","endLine":31,"endColumn":12},{"ruleId":"306","severity":1,"message":"400","line":32,"column":10,"nodeType":"308","messageId":"309","endLine":32,"endColumn":19},{"ruleId":"306","severity":1,"message":"401","line":33,"column":13,"nodeType":"308","messageId":"309","endLine":33,"endColumn":16},{"ruleId":"306","severity":1,"message":"326","line":34,"column":8,"nodeType":"308","messageId":"309","endLine":34,"endColumn":12},{"ruleId":"306","severity":1,"message":"373","line":36,"column":9,"nodeType":"308","messageId":"309","endLine":36,"endColumn":13},{"ruleId":"306","severity":1,"message":"339","line":39,"column":5,"nodeType":"308","messageId":"309","endLine":39,"endColumn":7},{"ruleId":"306","severity":1,"message":"328","line":50,"column":12,"nodeType":"308","messageId":"309","endLine":50,"endColumn":19},{"ruleId":"306","severity":1,"message":"329","line":51,"column":12,"nodeType":"308","messageId":"309","endLine":51,"endColumn":20},{"ruleId":"334","severity":1,"message":"402","line":87,"column":7,"nodeType":"336","endLine":87,"endColumn":9,"suggestions":"403"},{"ruleId":"306","severity":1,"message":"351","line":9,"column":5,"nodeType":"308","messageId":"309","endLine":9,"endColumn":14},{"ruleId":"306","severity":1,"message":"352","line":10,"column":5,"nodeType":"308","messageId":"309","endLine":10,"endColumn":9},{"ruleId":"306","severity":1,"message":"353","line":11,"column":5,"nodeType":"308","messageId":"309","endLine":11,"endColumn":10},{"ruleId":"306","severity":1,"message":"383","line":15,"column":12,"nodeType":"308","messageId":"309","endLine":15,"endColumn":24},{"ruleId":"306","severity":1,"message":"400","line":24,"column":10,"nodeType":"308","messageId":"309","endLine":24,"endColumn":19},{"ruleId":"306","severity":1,"message":"401","line":25,"column":13,"nodeType":"308","messageId":"309","endLine":25,"endColumn":16},{"ruleId":"306","severity":1,"message":"326","line":26,"column":8,"nodeType":"308","messageId":"309","endLine":26,"endColumn":12},{"ruleId":"306","severity":1,"message":"373","line":29,"column":9,"nodeType":"308","messageId":"309","endLine":29,"endColumn":13},{"ruleId":"306","severity":1,"message":"339","line":32,"column":5,"nodeType":"308","messageId":"309","endLine":32,"endColumn":7},{"ruleId":"306","severity":1,"message":"329","line":40,"column":12,"nodeType":"308","messageId":"309","endLine":40,"endColumn":20},{"ruleId":"306","severity":1,"message":"384","line":41,"column":12,"nodeType":"308","messageId":"309","endLine":41,"endColumn":17},{"ruleId":"306","severity":1,"message":"404","line":41,"column":19,"nodeType":"308","messageId":"309","endLine":41,"endColumn":27},{"ruleId":"306","severity":1,"message":"374","line":42,"column":12,"nodeType":"308","messageId":"309","endLine":42,"endColumn":20},{"ruleId":"306","severity":1,"message":"405","line":42,"column":22,"nodeType":"308","messageId":"309","endLine":42,"endColumn":33},{"ruleId":"306","severity":1,"message":"406","line":43,"column":12,"nodeType":"308","messageId":"309","endLine":43,"endColumn":21},{"ruleId":"334","severity":1,"message":"335","line":80,"column":7,"nodeType":"336","endLine":80,"endColumn":9,"suggestions":"407"},{"ruleId":"376","severity":1,"message":"377","line":210,"column":45,"nodeType":"378","endLine":210,"endColumn":131},"no-unused-vars","'LandingPage' is defined but never used.","Identifier","unusedVar","no-native-reassign",["408"],"no-negated-in-lhs",["409"],"'Line' is defined but never used.","'Button' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'CardBody' is defined but never used.","'CardFooter' is defined but never used.","'CardTitle' is defined but never used.","'ListGroupItem' is defined but never used.","'ListGroup' is defined but never used.","'Container' is defined but never used.","'ExamplesNavbar' is defined but never used.","'bigChartData' is defined but never used.","'ipfs' is defined but never used.","'setLoadweb3s' is assigned a value but never used.","'account' is assigned a value but never used.","'contract' is assigned a value but never used.","no-unreachable","Unreachable code.","IfStatement","unreachableCode","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'loadBlockchainDates' and 'loadweb3s'. Either include them or remove the dependency array.","ArrayExpression",["410"],"'axios' is defined but never used.","'ps' is assigned a value but never used.","'baseURL' is assigned a value but never used.","'isAdmin' is assigned a value but never used.","'setDrinfo' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'Drinfo', 'loadBlockchainDates', and 'loadweb3s'. Either include them or remove the dependency array.",["411"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'phoneRegExp' is assigned a value but never used.","'result' is assigned a value but never used.","'FormGroup' is defined but never used.","'Form' is defined but never used.","'Input' is defined but never used.","'UncontrolledTooltip' is defined but never used.","'Swal' is defined but never used.","'histroy' is defined but never used.",["412"],"'Label' is defined but never used.","'FormText' is defined but never used.","'NavItem' is defined but never used.","'NavLink' is defined but never used.","'Nav' is defined but never used.","'Table' is defined but never used.","'TabContent' is defined but never used.","'TabPane' is defined but never used.","'UncontrolledCarousel' is defined but never used.","'carouselItems' is assigned a value but never used.","'tabs' is assigned a value but never used.","'setTabs' is assigned a value but never used.","'setLoadBlockchainDates' is assigned a value but never used.",["413"],["414"],"'Link' is defined but never used.","'isDoctor' is assigned a value but never used.",["415"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["416"],"React Hook React.useEffect has missing dependencies: 'Drinfo', 'loadBlockchainDate', 'loadBlockchainDates', and 'loadweb3s'. Either include them or remove the dependency array.",["417"],["418"],"'DropdownItem' is defined but never used.","'patID' is assigned a value but never used.","'details' is assigned a value but never used.",["419"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'detailsPage' is assigned a value but never used.","'useEffect' is defined but never used.",["420"],["421"],["422"],["423"],"React Hook React.useEffect has missing dependencies: 'isAdmin', 'isadmin', 'isdoctor', and 'ishome'. Either include them or remove the dependency array.",["424"],"'scrollToDownload' is assigned a value but never used.","'useFormik' is defined but never used.","'Yup' is defined but never used.","React Hook React.useEffect has missing dependencies: 'loadBlockchainDate', 'loadBlockchainDates', and 'loadweb3s'. Either include them or remove the dependency array.",["425"],"'setpatID' is assigned a value but never used.","'setIsDoctor' is assigned a value but never used.","'isPatient' is assigned a value but never used.",["426"],"no-global-assign","no-unsafe-negation",{"desc":"427","fix":"428"},{"desc":"429","fix":"430"},{"desc":"427","fix":"431"},{"desc":"427","fix":"432"},{"desc":"427","fix":"433"},{"desc":"427","fix":"434"},{"desc":"429","fix":"435"},{"desc":"436","fix":"437"},{"desc":"427","fix":"438"},{"desc":"427","fix":"439"},{"desc":"427","fix":"440"},{"desc":"427","fix":"441"},{"desc":"436","fix":"442"},{"desc":"427","fix":"443"},{"desc":"444","fix":"445"},{"desc":"446","fix":"447"},{"desc":"427","fix":"448"},"Update the dependencies array to be: [loadBlockchainDates, loadweb3s]",{"range":"449","text":"450"},"Update the dependencies array to be: [Drinfo, loadBlockchainDates, loadweb3s]",{"range":"451","text":"452"},{"range":"453","text":"450"},{"range":"454","text":"450"},{"range":"455","text":"450"},{"range":"456","text":"450"},{"range":"457","text":"452"},"Update the dependencies array to be: [Drinfo, loadBlockchainDate, loadBlockchainDates, loadweb3s]",{"range":"458","text":"459"},{"range":"460","text":"450"},{"range":"461","text":"450"},{"range":"462","text":"450"},{"range":"463","text":"450"},{"range":"464","text":"459"},{"range":"465","text":"450"},"Update the dependencies array to be: [isAdmin, isadmin, isdoctor, ishome]",{"range":"466","text":"467"},"Update the dependencies array to be: [loadBlockchainDate, loadBlockchainDates, loadweb3s]",{"range":"468","text":"469"},{"range":"470","text":"450"},[1040,1042],"[loadBlockchainDates, loadweb3s]",[1915,1917],"[Drinfo, loadBlockchainDates, loadweb3s]",[1720,1722],[2379,2381],[1715,1717],[2178,2180],[2181,2183],[2167,2169],"[Drinfo, loadBlockchainDate, loadBlockchainDates, loadweb3s]",[1718,1720],[2031,2033],[2181,2183],[1716,1718],[2096,2098],[1719,1721],[1107,1109],"[isAdmin, isadmin, isdoctor, ishome]",[2262,2264],"[loadBlockchainDate, loadBlockchainDates, loadweb3s]",[2285,2287]]